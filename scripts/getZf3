<?php

include('libComposer.php');

$components = array(
'zend-authentication',
'zend-barcode',
'zend-cache',
'zend-captcha',
'zend-code',
'zend-config',
'zend-console',
'zend-crypt',
'zend-db',
'zend-debug',
'zend-di',
'zend-diactoros',   // ??
'zend-dom',
'zend-escaper',
'zend-eventmanager',
'zend-feed',
'zend-file',
'zend-filter',
'zend-form',
'zend-http',
'zend-hydrator',   // ??
'zend-i18n-resources',
'zend-i18n',
'zend-inputfilter',
'zend-json-server',
'zend-json',
'zend-loader',
'zend-log',
'zend-mail',
'zend-math',
'zend-memory',
'zend-mime',
'zend-modulemanager',
'zend-mvc-console',
'zend-mvc-form',
'zend-mvc-i18n',
'zend-mvc-plugins',
'zend-mvc',
'zend-navigation',
'zend-paginator',
'zend-permissions-acl',
'zend-permissions-rbac',
'zend-progressbar',
'zend-psr7bridge',
'zend-serializer',
'zend-server',
'zend-servicemanager-di',
'zend-servicemanager',
'zend-session',
'zend-soap',
'zend-stratigility',
'zend-tag',
'zend-test',
'zend-text',
'zend-uri',
'zend-validator',
'zend-view',
'zend-xml2json',
'zend-xmlrpc',
'zend-stdlib',
'zendxml'
                    );
//$components = array('zend-session');

$begin = microtime(true);
$sqlite = new \Sqlite3(dirname(__DIR__).'/data/zendf3.sqlite');

$tables = array('components', 'classes', 'interfaces', 'namespaces', 'releases' ,'traits', 'deprecated');
foreach($tables as $table) {
    $sqlite->query('DELETE FROM '.$table);
    $sqlite->query('DELETE FROM sqlite_sequence WHERE name = "'.$table.'"');
}
$end = microtime(true);

$versions = 0;
foreach($components as $component) {
    print "Component  \n";
    $sqlite->query('INSERT INTO components VALUES (null, "'.$component.'")');
    $componentId = $sqlite->lastInsertRowID();
    
    $versions += readRelease($component, $componentId);
}

$sqlite->query('VACUUM;');


print "\n";
print count($components)." composants, with $versions versions\n";
print floor(filesize('data/zendf3.sqlite') / 1024). " ko  \n";
print number_format(1000 * ($end - $begin), 2). " ms\n";

function readRelease($component, $componentId) {
    global $sqlite;
    $res = shell_exec('cd projects/'.$component.'/code/; git fetch --all --quiet ; git tag -l | egrep \'release-[23]\.[0-9]\.0$\'');
    $versions = explode("\n", trim($res));
    $versions = array_filter($versions, function ($x) { return version_compare('2.4.99', str_replace('release-', '', $x)) < 0; });
    
    print count($versions)." for $component\n";
    foreach($versions as $version) {
        $sqlite->query('INSERT INTO releases VALUES (null, "'.$version.'", '.$componentId.')');
        $versionId = $sqlite->lastInsertRowID();
        
        print "$versionId\n";
    
        processVersion($component, $version, $versionId);
    }
    
    shell_exec('cd projects/'.$component.'/code/; git checkout HEAD');
    
    return count($versions);
}

function processVersion($component, $version, $versionId) {
    global $sqlite;

    $res = shell_exec('cd projects/'.$component.'/code/; git checkout --quiet '.$version);

    $dir = recursiveReaddir('projects/'.$component.'/code');

    $all = array();
    foreach($dir as $file) {
        $all[] = processFile($file);
        $all[] = processFileForDeprecated($file);
    }
    $all = call_user_func_array('array_merge_recursive', $all);
    $all['Class']     = array_filter($all['Class'],     function ($k) { return substr($k, 0, 5) === 'Zend\\'; }, ARRAY_FILTER_USE_KEY);
    $all['Interface'] = array_filter($all['Interface'], function ($k) { return substr($k, 0, 5) === 'Zend\\'; }, ARRAY_FILTER_USE_KEY);
    $all['Trait']     = array_filter($all['Trait'],     function ($k) { return substr($k, 0, 5) === 'Zend\\'; }, ARRAY_FILTER_USE_KEY);

    $res = shell_exec('cd projects/'.$component.'/code/; grep -ri -A 6 @deprecated * ');
    $deprecated = explode("\n--\n", $res);
    foreach($deprecated as $d) {
        if (preg_match('/^class (.*?)\s/s', $d, $r)) {
            $found = array();
            foreach($all['Class'] as $ns => $classes) {
                if (in_array($r[1], $classes)) {
                    $found[] = "$ns\\$r[1]";
                }
            }
            
            if (empty($found)) {
//                print "---\n$r[1]\n$d\n---\n";
//                print_r($all['Class']);
            } else {
//                print count($found)." deprecated\n";
                foreach($found as $f) {
                    $sqlite->query('INSERT INTO deprecated VALUES (null, "'.$f.'", '.$versionId.', "class")');
                }
            }
        } else {
//            print "Deprecated $d\n";
        }
    }
//    print_r($deprecated);
//    print $res;
//    print_r($all['Class']);
    save_cit($versionId, $all);
    
}

function save_cit($releaseId, $all) {
    global $sqlite;
    
    $classes = 0;
    foreach($all['Class'] as $namespace => $list) {
        $namespaceId = save($sqlite, 'namespaces', array('namespace'  => $namespace,
                                                         'release_id' => $releaseId));
        foreach($list as $className) {
            ++$classes;
            $classId = save($sqlite, 'classes', array('class'        => $className,
                                                      'namespace_id' => $namespaceId));
        }
    }

    $interfaces = 0;
    foreach($all['Interface'] as $namespace => $list) {
        $namespaceId = save($sqlite, 'namespaces', array('namespace'  => $namespace,
                                                         'release_id' => $releaseId));
        foreach($list as $interfaceName) {
            ++$interfaces;
            $interfaceId = save($sqlite, 'interfaces', array('interface'    => $interfaceName,
                                                             'namespace_id' => $namespaceId));
        }
    }

    $traits = 0;
    foreach($all['Trait'] as $namespace => $list) {
        $namespaceId = save($sqlite, 'namespaces', array('namespace'  => $namespace,
                                                         'release_id' => $releaseId));
        foreach($list as $interfaceName) {
            ++$traits;
            $traitId = save($sqlite, 'traits',     array('trait'        => $interfaceName,
                                                         'namespace_id' => $namespaceId));
        }
    }

    $deprecated = 0;
    foreach($all['Deprecated'] as $namespace => $list) {
        $namespaceId = save($sqlite, 'namespaces', array('namespace'  => $namespace,
                                                         'release_id' => $releaseId));
        foreach($list as $d) {
            ++$deprecated;
            $traitId = save($sqlite, 'deprecated',     array('namespace_id' => $namespaceId,
                                                             'type'         => $d['type'],
                                                             'name'         => $d['name'],
                                                             'cit'          => $d['cit'],
                                                             ));
        }
    }
    
//    print "$release : $classes Classes, $interfaces Interfaces, $traits Traits\n";
}

function save ($sqlite, $table, $data) {
    $where = array();
    foreach($data as $col => $value) {
        $where[] = "$col = '".$sqlite->escapeString($value)."'";
    }
    $where = join(' AND ', $where);

    $res = $sqlite->querySingle('SELECT * FROM '.$table.' WHERE '.$where);
    if (empty($res)) {
        $cols = array('id');
        $values = array('null');
        
        foreach($data as $c => $v) {
            $cols[] = $c;
            $values[] = "'".$sqlite->escapeString($v)."'";
        }
        
        $cols = join(', ', $cols);
        $values = join(', ', $values);
        $query = "INSERT INTO $table ($cols) VALUES ($values)";
        $sqlite->query($query);
        
        $res = $sqlite->lastInsertRowID();
    }
    
    return $res;
}

?>