<?php


$components = array(
'zend-authentication',
'zend-barcode',
'zend-cache',
'zend-captcha',
'zend-code',
'zend-config',
'zend-console',
'zend-crypt',
'zend-db',
'zend-debug',
'zend-di',
'zend-diactoros',
'zend-dom',
'zend-escaper',
'zend-eventmanager',
'zend-feed',
'zend-file',
'zend-filter',
'zend-form',
'zend-http',
'zend-hydrator',
'zend-i18n-resources',
'zend-i18n',
'zend-inputfilter',
'zend-json-server',
'zend-json',
'zend-loader',
'zend-log',
'zend-mail',
'zend-math',
'zend-memory',
'zend-mime',
'zend-modulemanager',
'zend-mvc-console',
'zend-mvc-form',
'zend-mvc-i18n',
'zend-mvc-plugins',
'zend-mvc',
'zend-navigation',
'zend-paginator',
'zend-permissions-acl',
'zend-permissions-rbac',
'zend-progressbar',
'zend-psr7bridge',
'zend-serializer',
'zend-server',
'zend-servicemanager-di',
'zend-servicemanager',
'zend-session',
'zend-soap',
'zend-stratigility',
'zend-tag',
'zend-test',
'zend-text',
'zend-uri',
'zend-validator',
'zend-view',
'zend-xml2json',
'zend-xmlrpc',
'zend-stdlib',
'zend-router',
'zendxml',
'zend-mvc-plugin-fileprg',
'zend-mvc-plugin-flashmessenger',
'zend-mvc-plugin-prg',
'zend-mvc-plugin-identity',

                    );

$dependencies = array();
foreach($components as $component) {
    $json = json_decode(file_get_contents('projects/'.$component.'/code/composer.json'));

    $dependencies[$component] = array_filter(array_keys((array) $json->require), function ($x) { return substr($x, 0,13) === 'zendframework'; });
    $dependencies[$component] = array_map(function ($x) { return substr($x, 14); }, $dependencies[$component]);
    
    $diff = array_diff($dependencies[$component], $components);
    if (!empty($diff)) {
        print_r($diff);
    }
}

$cytoscape = array();


$nodes = [];
$names = [];

$i = 0;
foreach($dependencies as $name => $d) {
    ++$i;
    $nodes[] = "$i [label=\"$name\"];\n";
    $cytoscape[] = (object) ['data' => (object) ['id' => $name]]; 
    $names[$name] = $i;
}

$deps = [];
foreach($dependencies as $name => $d) {
        foreach($d as $dependency) {
            $deps[] = $names[$name] .' -> '.$names[$dependency]."\n";
            $cytoscape[] = (object) ['data' => (object) ['id' => $name.'-'.$dependency, 
                                                         'source' => $name,
                                                         'target' => $dependency]]; 
        }
}

$nodes = join('', $nodes);
$deps = join('', $deps);

        $dot = <<<DOT
        digraph graphname {        
        fontname = "Bitstream Vera Sans"
        fontsize = 20
        colorscheme = "bugn9"
    
        node [
            fontname = "Bitstream Vera Sans"
            fontsize = 8
            shape = "record"
        ]
    
        edge [
            fontname = "Bitstream Vera Sans"
            fontsize = 8
            arrowhead = "empty"
        ]
        
        $nodes
        $deps
        }
 
DOT;

file_put_contents('zf3.dot', $dot);
file_put_contents('cytoscape.js', json_encode($cytoscape, JSON_PRETTY_PRINT));
?>