<?php

//print_r(processFile('/private/var/folders/3j/pf24y7cx7j71yg0h59t16xqr0000gn/T/exComposer8TRJo9/vendor/monolog/monolog/tests/Monolog/Processor/IntrospectionProcessorTest.php')); die();


$project = 'neoxygen';

$composer = json_decode(file_get_contents("projects/$project/code/composer.json"));
$components = (array) $composer->require;

//$components = array('monolog/monolog' => '~1.3');
unset($components['php']);
foreach($components as $k => $v) {
    if (substr($k, 0, 4) == 'ext-') {
        unset($components[$k]);
    }

    if (substr($k, 0, 4) == 'lib-') {
        unset($components[$k]);
    }
}

$sqlite = new sqlite3('data/composer.sqlite');

foreach($components as $fullName => $version) {
    list($vendor, $component) = explode('/', strtolower($fullName));
    
    $res = $sqlite->query("SELECT id FROM components WHERE vendor='$vendor' AND component = '$component'");
    $res = $res->fetchArray(SQLITE3_ASSOC)['id'];
    if ($res) {
        $componentId = $res;
        print "$vendor/$component already in reference ($componentId)\n";
    } else {
        $date = time();
        $sqlite->query("INSERT INTO components (vendor, component, last_check) VALUES ('$vendor', '$component', $date);");
        $componentId = $sqlite->lastInsertRowID();
        print "$vendor/$component newly inserted in reference ($componentId)\n";
    }

    print "Reading $vendor/$component versions\n";
    $res = shell_exec('composer show '.$fullName);

    // remove colors
    $res = preg_replace('/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]/s', '', $res);
    preg_match_all("#versions : (.*?)\n#s", $res, $r);
    $versions = explode(', ', $r[1][0]);

    foreach($versions as $version) {
        if ($version[0] == 'v') { $version = substr($version, 1);}
        $sqlite->query("INSERT OR IGNORE INTO versions (component_id, version) VALUES ($componentId, '$version');");
    }

    print "Fetching $vendor/$component\n";
    $composer = new stdClass();
    $composer->require = new stdClass();
    $composer->require->$fullName = $version;
    $json = json_encode($composer);
    
    $tmpdir = tempnam(sys_get_temp_dir(), 'exComposer');
    unlink($tmpdir);
    mkdir($tmpdir, 0755);
    file_put_contents($tmpdir.'/composer.json', $json);
    print shell_exec("cd $tmpdir; composer install --ignore-platform-reqs");
    
    print $tmpdir."\n";
    
//    $tmpdir = '/private/var/folders/3j/pf24y7cx7j71yg0h59t16xqr0000gn/T/exComposerp2EDgr');
    $files = recursiveReaddir($tmpdir.'/vendor/'.strtolower($fullName));
    $all = array();
    foreach($files as $file) {
        $all = array_merge_recursive($all, processFile($file));
    }
    
    $namespacesIds = array();
    foreach($all as $type => $objects) {
        foreach(array_keys($objects) as $ns) {
            if (!isset($namespacesIds[$ns])) {
                $ns = $sqlite->escapeString($ns);
                $res = $sqlite->query("SELECT id FROM namespaces WHERE component_id = '$componentId' AND namespace = '$ns'");
                $nsid = $res->fetchArray(SQLITE3_ASSOC)['id'];
                if ($nsid) {
                    $namespacesIds[$ns] = $nsid;
                } else {
                    $sqlite->query("INSERT INTO namespaces (component_id, namespace) VALUES ('$componentId', '$ns');");
                    $namespacesIds[$ns] = $sqlite->lastInsertRowID();
                }
            }
        }
    }
    
    foreach($all['Class'] as $ns => $classes) {
        foreach($classes as $class) {
            $res = $sqlite->query("SELECT id FROM classes WHERE namespace_id = '{$namespacesIds[$ns]}' AND classname = '$class'");
            $nsid = $res->fetchArray(SQLITE3_ASSOC)['id'];
            if ($nsid) {
//                print "   $class found in $nsid\n";
            } else {
                $sqlite->query("INSERT INTO classes (namespace_id, classname) VALUES ('{$namespacesIds[$ns]}', '$class');");
            }
        }
    }

    foreach($all['Interface'] as $ns => $interfaces) {
        foreach($interfaces as $interface) {
            $res = $sqlite->query("SELECT id FROM interfaces WHERE namespace_id = '{$namespacesIds[$ns]}' AND interfacename = '$interface'");
            $nsid = $res->fetchArray(SQLITE3_ASSOC)['id'];
            if ($nsid) {
//                print "   $class found in $nsid\n";
            } else {
                $sqlite->query("INSERT INTO interfaces (namespace_id, interfacename) VALUES ('{$namespacesIds[$ns]}', '$interface');");
            }
        }
    }

    foreach($all['Trait'] as $ns => $traits) {
        foreach($traits as $trait) {
            $res = $sqlite->query("SELECT id FROM traits WHERE namespace_id = '{$namespacesIds[$ns]}' AND traitname = '$trait'");
            $nsid = $res->fetchArray(SQLITE3_ASSOC)['id'];
            if ($nsid) {
//                print "   $class found in $nsid\n";
            } else {
                $sqlite->query("INSERT INTO traits (namespace_id, traitname) VALUES ('{$namespacesIds[$ns]}', '$trait');");
            }
        }
    }

    
}

function recursiveReaddir($tmpdir) {
    $dir = opendir($tmpdir);
    $return = array();
    
    while($file = readdir($dir)) {
        if ($file[0] == '.') { continue; }
        
        if (is_dir($tmpdir.'/'.$file)) {
            $return = array_merge($return, recursiveReaddir($tmpdir.'/'.$file));
        } else {
            if (substr($file, -4) != '.php') { continue; }
            $return[] = $tmpdir.'/'.$file;
        }
    }
    
    return $return;
}

function processFile($file) {
    $tokens = token_get_all(file_get_contents($file));
    
    $return = array('Class' => array(),
                    'Interface' => array(),
                    'Trait' => array());
    $namespace = 'global';
    
    foreach($tokens as $id => $token) {
        if (is_array($token)) {
            switch($token[0]) {
                case T_NAMESPACE : 
                    $namespace = '';
                    for ($i = $id + 2; ($tokens[$i] != ';') && ($i - $id < 20); $i++) {
                        if (is_array($tokens[$i])) {
                            $namespace .= $tokens[$i][1];
                        } else {
                            $namespace .= $tokens[$i];
                        }
                    }
                    break;

                case T_CLASS : 
                    $return['Class'][$namespace][] = $tokens[$id + 2][1];
                    break;

                case T_INTERFACE : 
                    $return['Interface'][$namespace][] = $tokens[$id + 2][1];
                    break;

                case T_TRAIT : 
                    $return['Trait'][$namespace][] = $tokens[$id + 2][1];
                    break;
                
                default : 
                    // nothing to do
                
            }
        }
    }
    
    return $return;
}

?>
