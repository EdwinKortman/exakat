<?php

$project = $argv[1];
if (empty($project)) {
    die( "getComposer <project>\n");
}
if (!file_exists('./projects/'.$project)) {
    die( "No such project as $project\n");
}

if (!file_exists('./projects/'.$project.'/code/composer.json')) {
    die( "No composer for project $project\n");
}

include('libComposer.php');
$composer = json_decode(file_get_contents("projects/$project/code/composer.json"));
$components = array_merge((array) @$composer->suggest,
                          (array) @$composer->{'require-dev'},
                          (array) @$composer->require);

unset($components['php']);
foreach($components as $k => $v) {
    if (substr($k, 0, 4) == 'ext-') {
        unset($components[$k]);
        continue;
    }

    if (substr($k, 0, 4) == 'lib-') {
        unset($components[$k]);
        continue;
    }
    
    if (strpos($v, ' ') !== false) {
        $components[$k] = 'latest';
        continue;
    }

    if ($v === '*') {
        $components[$k] = 'latest';
        continue;
    }
}

print "About to check for ".count($components)." components\n";
foreach($components as $fullName => $version) {
    print " + $fullName\n";
}

$sqlite = new sqlite3('data/composer.sqlite');

if (in_array('-t', $argv)) {
    foreach($components as $fullName => $version) {
        list($vendor, $component) = explode('/', strtolower($fullName));
    
        $res = $sqlite->query(<<<SQL
    SELECT components.id, group_concat(version) FROM components 
              JOIN versions
                ON versions.component_id = components.id
            WHERE vendor='$vendor' AND 
                  component = '$component'
            ORDER BY version DESC
SQL
    );

        $row = $res->fetchArray(SQLITE3_NUM);
        $numRows = 1;
        while($res->fetchArray(SQLITE3_NUM)) { ++$numRows; }
        print $numRows." lines for $vendor/$component\n";

        list($res, $dbVersion) = $row;
        if ($res) {
            $componentId = $res;
            print "$vendor/$component already in reference ($version / ".substr($dbVersion, 0, 50).")\n";
        } else {
            print "$vendor/$component is not yet in the database\n";
        }
    }
    die();
}

foreach($components as $fullName => $version) {
    list($vendor, $component) = explode('/', strtolower($fullName));
    
    print "Processing $vendor/$component $version\n";
    processComponent($vendor, $component, $version);
}

$res = $sqlite->query("SELECT count(*) AS nb FROM components");
print $res->fetchArray(SQLITE3_ASSOC)['nb']." components\n";
$res = $sqlite->query("SELECT count(*) AS nb FROM versions");
print $res->fetchArray(SQLITE3_ASSOC)['nb']." versions\n";
$res = $sqlite->query("SELECT count(*) AS nb FROM classes");
print $res->fetchArray(SQLITE3_ASSOC)['nb']." classes\n";
$res = $sqlite->query("SELECT count(*) AS nb FROM interfaces");
print $res->fetchArray(SQLITE3_ASSOC)['nb']." interfaces\n";
$res = $sqlite->query("SELECT count(*) AS nb FROM traits");
print $res->fetchArray(SQLITE3_ASSOC)['nb']." traits\n";

unset($sqlite);
// print "Optimize database\n";
//print shell_exec('robo check:composer');
shell_exec('sqlite3 my.db "VACUUM;"');

$count = 0;
foreach(glob(sys_get_temp_dir()."/exComposer*") as $tmpdir) {
    if (strpos($tmpdir, 'exComposer') === false) {
        continue;
    }
    ++$count;
    shell_exec( "rm -rf $tmpdir");
}
print "Removed $count temporary dirs\n";


?>
