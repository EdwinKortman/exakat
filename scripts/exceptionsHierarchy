#!/usr/bin/env php
<?php
/*
 * Copyright 2012-2015 Damien Seguy â€“ Exakat Ltd <contact(at)exakat.io>
 * This file is part of Exakat.
 *
 * Exakat is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Exakat is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Exakat.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <http://exakat.io/>.
 *
*/

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$query = <<<'QUERY'

/// insert a query here
g.V().hasLabel("Class").in('NAME').values('fullcode');
;

QUERY;

$graphDB = new \Exakat\Graph\Gremlin3($config);

$query = 'g.V().hasLabel("File").values("fullcode")';
$res = $graphDB->query($query);
$files = array_flip($res->results);

$r = '';
$json = new stdclass();
$json->comment = "Commentaire";
$json->nodes = array();
$json->edges = array();

$in = array();
$out = array();
foreach($files as $file => $id) {
    $R = $id.' [label="'.addslashes($file).'"';
    $R .= "];\n";
    $r .= $R;
    
    $R = new Stdclass();
    $R->id = $id;
    $R->caption = $file;
    $R->incoming = rand(0,10);
    $R->outgoing = rand(0,10);
    
    $json->nodes[$id] = $R;
    $in[$id] = 0;
    $out[$id] = 0;
}

$stats['files'] = count($files);
$files['CANARY'] = -1;

$query = 'g.V().hasLabel("File").as("file")
           .repeat( out() ).emit(hasLabel("Include")).times(15)
           .hasLabel("Include").in("NAME").as("include")
           .select("file", "include").by("fullcode").by("fullcode")';
$res = $graphDB->query($query);
$links = $res->results;

$stats['includes'] = 0;
$stats['includes-missed'] = 0;
foreach($links as $link) {
    $start = $files[$link->file];
    
    foreach($files as $file => $end) {
        if (strpos($link->include, $file) !== false) {
            $R  = "$start -> $end [label=\"include\" color=green];\n";
            $r .= $R;

            $R = new Stdclass();
            $R->source = $start;
            $R->target = $end;
            $R->caption = "include";
            $json->edges[] = $R;
            ++$in[$start];
            ++$out[$end];
                        
            ++$stats['includes'];
            break 1;
        }
    }
    ++$stats['includes-missed'];
}

// Finding extends and implements
$query = 'g.V().hasLabel("File").as("file")
           .repeat( out() ).emit(hasLabel("Class", "Interface")).times(15)
           .hasLabel("Class", "Interface").outE().hasLabel("EXTENDS", "IMPLEMENTS").as("type").inV().in("DEFINITION")
           .repeat( __.in() ).emit(hasLabel("File")).times(15).hasLabel("File")
           .as("include")
           .select("file", "type", "include").by("fullcode").by(label()).by("fullcode")
           ';
$res = $graphDB->query($query);
$extends = $res->results;

$stats['extends'] = 0;
$stats['implements'] = 0;
foreach($extends as $link) {

    $start = $files[$link->file];
    $end = $files[$link->include];
    $type = strtolower($link->type);
    
    $R  = "$start -> $end [label=\"$type\" color=red];\n";
    $r .= $R;
    
    $R = new Stdclass();
    $R->source = $start;
    $R->target = $end;
    $R->caption = $type;
    $json->edges[] = $R;
    ++$in[$start];
    ++$out[$end];

    ++$stats[$type];
}

// Finding extends and implements
$query = 'g.V().hasLabel("File").as("file")
           .repeat( out() ).emit(hasLabel("Interface")).times(15)
           .hasLabel("Interface").out("EXTENDS").in("DEFINITION")
           .repeat( __.in() ).emit(hasLabel("File")).times(15).hasLabel("File")
           .as("include")
           .select("file", "include").by("fullcode").by("fullcode")
           ';
$res = $graphDB->query($query);
$extends = $res->results;

foreach($extends as $link) {
    $start = $files[$link->file];
    $end = $files[$link->include];
    
    $R  = "$start -> $end [label=\"extends\" color=red];\n";
    $r .= $R;

    $R = new Stdclass();
    $R->source = $start;
    $R->target = $end;
    $R->caption = "extends";
    $json->edges[] = $R;
    ++$in[$start];
    ++$out[$end];

    ++$stats['extends'];
}

// Adds traits
// Finding extends and implements
$query = 'g.V().hasLabel("File").as("file")
           .repeat( out() ).emit(hasLabel("Class", "Trait")).times(15)
           .hasLabel("Class", "Trait").out("BLOCK").out("ELEMENT").hasLabel("Use").out("USE").in("DEFINITION")
           .repeat( __.in() ).emit(hasLabel("File")).times(15).hasLabel("File")
           .as("include")
           .select("file", "include").by("fullcode").by("fullcode")
           ';
$res = $graphDB->query($query);
$extends = $res->results;

$stats['traits'] = 0;
foreach($extends as $link) {

    $start = $files[$link->file];
    $end = $files[$link->include];
    
    $R  = "$start -> $end [label=\"use\" color=orange];\n";
    $r .= $R;

    $R = new Stdclass();
    $R->source = $start;
    $R->target = $end;
    $R->caption = "use";
    $json->edges[] = $R;
    ++$in[$start];
    ++$out[$end];

    ++$stats['traits'];
}

// find functions
$query = 'g.V().hasLabel("File").as("file")
           .repeat( out() ).emit(hasLabel("Functioncall")).times(15)
           .hasLabel("Functioncall").in("DEFINITION")
           .repeat( __.in() ).emit(hasLabel("File")).times(15).hasLabel("File")
           .as("include")
           .select("file", "include").by("fullcode").by("fullcode")
           ';
$res = $graphDB->query($query);
$extends = $res->results;

$stats['functions'] = 0;
$done = array();
foreach($extends as $link) {
    $start = $files[$link->include];
    $end = $files[$link->file];
    if (isset($done[$start][$end])) { continue; }
    $done[$start][$end] = 1;
    
    $R  = "$start -> $end [label=\"functioncall\" color=blue];\n";
    $r .= $R;
    ++$in[$start];
    ++$out[$end];

    $R = new Stdclass();
    $R->source = $start;
    $R->target = $end;
    $R->caption = "functioncall";
    $json->edges[] = $R;
    ++$stats['functions'];
}


// constants
$query = 'g.V().hasLabel("File").as("file")
           .repeat( out() ).emit(hasLabel("Identifier")).times(15)
           .hasLabel("Identifier").where( __.in("NAME", "CLASS", "SUBNAME", "PROPERTY", "AS", "CONSTANT", "TYPEHINT", "EXTENDS", "USE", "IMPLEMENTS", "INDEX" ).count().is(eq(0)) ).in("DEFINITION")
           .repeat( __.in() ).emit(hasLabel("File")).times(15).hasLabel("File")
           .as("include")
           .select("file", "include").by("fullcode").by("fullcode")
           ';
$res = $graphDB->query($query);
$stats['constants'] = 0;
$stats['constants-multiple'] = 0;
$stats['constants-total'] = 0;
if (isset($res->results)) {
    $extends = $res->results;

    $done = array();
    foreach($extends as $link) {
        ++$stats['constants-total'];
        $start = $files[$link->include];
        $end = $files[$link->file];
        if (isset($done[$start][$end])) { 
            ++$stats['constants-multiple'];
            continue; 
        }
        $done[$start][$end] = 1;
        
        $R  = "$start -> $end [label=\"constants\" color=blue];\n";
        $r .= $R;
        ++$in[$start];
        ++$out[$end];

        $R = new Stdclass();
        $R->source = $start;
        $R->target = $end;
        $R->caption = "constants";
        $json->edges[] = $R;
        ++$stats['constants'];
    }
}

// find new
$query = 'g.V().hasLabel("File").as("file")
           .repeat( out() ).emit(hasLabel("New")).times(15)
           .hasLabel("New").out("NEW").in("DEFINITION")
           .repeat( __.in() ).emit(hasLabel("File")).times(15).hasLabel("File")
           .as("include")
           .select("file", "include").by("fullcode").by("fullcode")
           ';
$res = $graphDB->query($query);
$extends = $res->results;

$stats['new'] = 0;
$done = array();
foreach($extends as $link) {
    $start = $files[$link->include];
    $end = $files[$link->file];
    if (isset($done[$start][$end])) { continue; }
    $done[$start][$end] = 1;
    
    $R  = "$start -> $end [label=\"new\" color=blue];\n";
    $r .= $R;
    ++$in[$start];
    ++$out[$end];

    $R = new Stdclass();
    $R->source = $start;
    $R->target = $end;
    $R->caption = "new";
    $json->edges[] = $R;
    ++$stats['new'];
}

// find static calls
$query = 'g.V().hasLabel("File").as("file")
           .repeat( out() ).emit(hasLabel("Staticconstant", "Staticmethodcall", "Staticproperty")).times(15)
           .hasLabel("Staticconstant", "Staticmethodcall", "Staticproperty").as("type").out("CLASS").in("DEFINITION")
           .repeat( __.in() ).emit(hasLabel("File")).times(15).hasLabel("File")
           .as("include")
           .select("file", "type", "include").by("fullcode").by(label()).by("fullcode")
           ';
$res = $graphDB->query($query);
$extends = $res->results;

$stats['staticconstant'] = 0;
$stats['staticproperty'] = 0;
$stats['staticmethodcall'] = 0;
$done = array();
foreach($extends as $link) {
    $start = $files[$link->include];
    $end = $files[$link->file];
    if ($start === $end) { continue;}
    if (isset($done[$start][$end])) { continue; }
    $done[$start][$end] = 1;
    $type = strtolower($link->type);
    
    $R  = "$start -> $end [label=\"$type\" color=purple];\n";
    $r .= $R;
    ++$in[$start];
    ++$out[$end];

    $R = new Stdclass();
    $R->source = $start;
    $R->target = $end;
    $R->caption = $type;
    $json->edges[] = $R;

    ++$stats[$type];
}

foreach($in as $id => $i) {
    $json->nodes[$id]->incoming = $i;
    $json->nodes[$id]->outgoing = $out[$id];
}

print_r($stats);

        $r = " digraph graphname {
    $r
     }";
     
     file_put_contents('fidep.dot', $r);
     file_put_contents('fidep.json', json_encode($json));
     print "written \n";
/*
foreach($res as $k => $v) {
    print_r($k);
    print " ";
    print_r($v);
    print "\n";
}
*/

?>