<?php

include('libComposer.php');
//$revisions = glob('../projects/zf2/code/tags/release-*');

$res = shell_exec('cd ../projects/zf2/code/; git tag');
$revisions = explode("\n", trim($res));
$revisions = array_filter( $revisions, function ($release) { return preg_match('/release-\d.\d.\d+$/', $release); });
$revisions = array_values($revisions);

//$revisions = array_slice($revisions, 0, 4);
$revisions = array('release-2.0.0', 
                   'release-2.1.0', 
                   'release-2.2.0', 
                   'release-2.3.0', 
                   'release-2.4.0', 
                   'release-2.5.0', 
                   'release-3.0.0', );

foreach($revisions as $revision) {
    $version = substr($revision, 8);

    shell_exec('cd ../projects/zf2/code/; git checkout -f '.$revision.' 2>&1 >> /dev/null; composer update');
    $dir = recursiveReaddir('../projects/zf2/code');

    $all = array();
    foreach($dir as $file) {
        $all[] = processFile($file);
    }
    $all = call_user_func_array('array_merge_recursive', $all);
    $all['Class'] = array_filter($all['Class'], function ($k) { return substr($k, 0, 5) === 'Zend\\'; }, ARRAY_FILTER_USE_KEY);
    $all['Interface'] = array_filter($all['Interface'], function ($k) { return substr($k, 0, 5) === 'Zend\\'; }, ARRAY_FILTER_USE_KEY);
    $all['Trait'] = array_filter($all['Trait'], function ($k) { return substr($k, 0, 5) === 'Zend\\'; }, ARRAY_FILTER_USE_KEY);

    $e = microtime(true);
    
    save_cit($revision, $all);

//    print "$revision\t".count($all['Class']['global'])."\t".count($all['Interface']['global'])."\t".(isset($all['Trait']['global']) ? count($all['Trait']['global']) : 0)."\n";

}

function save_cit($release, $all) {
    $sqlite = new \Sqlite3(dirname(__DIR__).'/data/zendf2.sqlite');
    
    $releaseId = save($sqlite, 'releases', array('release' => $release));

    $classes = 0;
    foreach($all['Class'] as $namespace => $list) {
        $namespaceId = save($sqlite, 'namespaces', array('namespace'  => $namespace,
                                                         'release_id' => $releaseId));
        foreach($list as $className) {
            ++$classes;
            $classId = save($sqlite, 'classes', array('class'        => $className,
                                                      'namespace_id' => $namespaceId));
        }
    }

    $interfaces = 0;
    foreach($all['Interface'] as $namespace => $list) {
        $namespaceId = save($sqlite, 'namespaces', array('namespace'  => $namespace,
                                                         'release_id' => $releaseId));
        foreach($list as $interfaceName) {
            ++$interfaces;
            $interfaceId = save($sqlite, 'interfaces', array('interface'    => $interfaceName,
                                                             'namespace_id' => $namespaceId));
        }
    }

    $traits = 0;
    foreach($all['Trait'] as $namespace => $list) {
        $namespaceId = save($sqlite, 'namespaces', array('namespace'  => $namespace,
                                                         'release_id' => $releaseId));
        foreach($list as $interfaceName) {
            ++$traits;
            $traitId = save($sqlite, 'traits',     array('trait'        => $interfaceName,
                                                         'namespace_id' => $namespaceId));
        }
    }
    
    print "$release : $classes Classes, $interfaces Interfaces, $traits Traits\n";
}

function save ($sqlite, $table, $data) {
    $where = array();
    foreach($data as $col => $value) {
        $where[] = "$col = '".$sqlite->escapeString($value)."'";
    }
    $where = join(' AND ', $where);

    $res = $sqlite->querySingle('SELECT * FROM '.$table.' WHERE '.$where);
    if (empty($res)) {
        $cols = array('id');
        $values = array('null');
        
        foreach($data as $c => $v) {
            $cols[] = $c;
            $values[] = "'".$sqlite->escapeString($v)."'";
        }
        
        $cols = join(', ', $cols);
        $values = join(', ', $values);
        $query = "INSERT INTO $table ($cols) VALUES ($values)";
        $sqlite->query($query);
        
        $res = $sqlite->lastInsertRowID();
    }
    
    return $res;
}

?>