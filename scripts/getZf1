<?php

include('libComposer.php');
$revisions = glob('../projects/zf1/code/tags/release-*');

$res = shell_exec('cd ../projects/zf1-12/code/; git tag');
$revisions = array_merge($revisions, explode("\n", trim($res)));
$revisions = array_map('basename', $revisions);

foreach($revisions as $revision) {
    $version = substr($revision, 8);

    if (version_compare('1.12', $version) < 0) { // version 1.12 + 
        shell_exec('cd ../projects/zf1-12/code/; git checkout '.$revision.' 2>&1 >> /dev/null');
        $dir = recursiveReaddir('../projects/zf1-12/code/library');
    } else {
        $dir = recursiveReaddir('../projects/zf1/code/tags/'.$revision.'/library');
        if (empty($dir)) { continue; }
    }
    
    $all = array();
    foreach($dir as $file) {
        $all[] = processFile($file);
    }
    $all = call_user_func_array('array_merge_recursive', $all);

    $e = microtime(true);
    
    save_cit($revision, $all);

//    print "$revision\t".count($all['Class']['global'])."\t".count($all['Interface']['global'])."\t".(isset($all['Trait']['global']) ? count($all['Trait']['global']) : 0)."\n";

}

function save_cit($release, $all) {
    $sqlite = new \Sqlite3(dirname(__DIR__).'/data/zendf.sqlite');
    
    $releaseId = save($sqlite, 'releases', array('release' => $release));
    $namespaceId = save($sqlite, 'namespaces', array('namespace' => 'global',
                                                     'release_id' => $releaseId));
    $classes = 0;
    foreach($all['Class']['global'] as $className) {
        ++$classes;
        $classId = save($sqlite, 'classes', array('class' => $className,
                                                  'namespace_id' => $namespaceId));
    }

    $interfaces = 0;
    foreach($all['Interface']['global'] as $interfaceName) {
        ++$interfaces;
        $interfaceId = save($sqlite, 'interfaces', array('interface' => $interfaceName,
                                                         'namespace_id' => $namespaceId));
    }
    
    print "$release : $classes Classes, $interfaces Interfaces\n";
}

function save ($sqlite, $table, $data) {
    $where = array();
    foreach($data as $col => $value) {
        $where[] = "$col = '".$sqlite->escapeString($value)."'";
    }
    $where = implode(' AND ', $where);

    $res = $sqlite->querySingle('SELECT * FROM '.$table.' WHERE '.$where);
    if (empty($res)) {
        $cols = array('id');
        $values = array('null');
        
        foreach($data as $c => $v) {
            $cols[] = $c;
            $values[] = "'".$sqlite->escapeString($v)."'";
        }
        
        $cols = implode(', ', $cols);
        $values = implode(', ', $values);
        $query = "INSERT INTO $table ($cols) VALUES ($values)";
        $sqlite->query($query);
        
        $res = $sqlite->lastInsertRowID();
    }
    
    return $res;
}

?>