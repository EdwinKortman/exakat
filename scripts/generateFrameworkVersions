<?php

$vendor = $argv[1];

print "Generating for $vendor\n";

$database = strtolower($vendor);
$sqlite = new Sqlite3('data/'.$database.'.sqlite');

$versions = array();
$res = $sqlite->query("SELECT version FROM versions");
while($row = $res->fetchArray(\SQLITE3_ASSOC)) {
    $versions[] = $row['version'];
}
print_r($versions);


$paths = array('human/en/'.$vendor,
               'tests/analyzer/Test/'.$vendor,
               'tests/analyzer/exp/'.$vendor,
               'tests/analyzer/source/'.$vendor,
               'library/Exakat/Analyzer/'.$vendor,
               );
foreach($paths as $path) {
    if (!file_exists($path)) {
        print "Creating $path folder\n";
        mkdir($path, 0755);
    }
}


checkExistence($vendor, $versions);
generateMain($vendor);
generateData($vendor);
generateMissing($vendor);
foreach($versions as $version) {
    generateVersion($vendor, $version);
}
    
function checkExistence($vendor, $versions) {
    if (!file_exists('library/Exakat/Analyzer/'.$vendor.'/'.$vendor.'Usage.php')) {
        print $vendor.'/'.$vendor.'Usage is missing'.PHP_EOL;
    }

    if (!file_exists('library/Exakat/Data/'.$vendor.'.php')) {
        print 'Data/'.$vendor.'.php is missing'.PHP_EOL;
    }

    foreach($versions as $version) {
        $shortVersion = str_replace('.', '', $version);
        if (!file_exists('library/Exakat/Analyzer/'.$vendor.'/'.$vendor.$shortVersion.'Undefined.php')) {
            print $vendor.'/'.$vendor.$shortVersion.'Undefined is missing'.PHP_EOL;
        }   
    }
}

function generateMain($vendor) {
    if (file_exists('library/Exakat/Analyzer/'.$vendor.'/'.$vendor.'Usage.php')) {
        print " Exakat/Analyze/$vendor/{$vendor}Usage.php already exists : rewriting\n"; 
    } else {
        print " Creating a new {$vendor}Usage\n";
        shell_exec('php ./scripts/createAnalyzer '.$vendor.'/'.$vendor.'Usage' );
    }

    global $sqlite;

    // Preparing the main file
    $name = strtolower($vendor);
$php = <<<PHP
<?php
/*
 * Copyright 2012-2017 Damien Seguy – Exakat Ltd <contact(at)exakat.io>
 * This file is part of Exakat.
 *
 * Exakat is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Exakat is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Exakat.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <http://exakat.io/>.
 *
*/

namespace Exakat\Analyzer\\$vendor;

use Exakat\Analyzer\Analyzer;
use Exakat\Analyzer\Common\UsesFramework;
use Exakat\Data\\$vendor;

class {$vendor}Usage extends UsesFramework {
    public function analyze() {
        \$data = new $vendor(\$this->config->dir_root.'/data', \$this->config->is_phar);
        
        \$x = \$data->getClasses('$name');
        if (empty(\$x)) {
            \$this->classes    = array();
        } else {
            \$this->classes    = array_values(array_unique(array_merge(...array_values(\$x))));
        }

        \$x = \$data->getInterfaces('$name');
        if (empty(\$x)) {
            \$this->interfaces    = array();
        } else {
            \$this->interfaces    = array_values(array_unique(array_merge(...array_values(\$x))));
        }

        \$x = \$data->getTraits('$name');
        if (empty(\$x)) {
            \$this->traits    = array();
        } else {
            \$this->traits    = array_values(array_unique(array_merge(...array_values(\$x))));
        }

        \$x = \$data->getNamespaces('$name');
        if (empty(\$x)) {
            \$this->namespaces    = array();
        } else {
            \$this->namespaces    = array_values(array_unique(array_merge(...array_values(\$x))));
        }

        parent::analyze();
    }
}

?>

PHP;
    file_put_contents('library/Exakat/Analyzer/'.$vendor.'/'.$vendor.'Usage.php', $php);
    print "Written library/Exakat/Analyzer/$vendor/{$vendor}Usage.php\n";

    // prepare documentation
    // Get one class

$query = <<<SQL
SELECT namespacesA.name || "\\" || cit.name AS name, cit.name AS classe FROM cit
JOIN namespaces AS namespacesA
    ON cit.namespaceId = namespacesA.id
LIMIT 1;

SQL;
$res = $sqlite->query($query);
$class = $res->fetchArray(\SQLITE3_ASSOC);

// Upgrade default documentation with stats and informations. 
$docs = <<<DOC
name = "$vendor Usage";
description = "Usage of $vendor.
";
clearphp = "";
exakatSince = "1.0.8";

DOC;
    file_put_contents('human/en/'.$vendor.'/'.$vendor.'Usage.ini', $docs);

    // prepare one test
    
$source = <<<PHP
<?php

use {$class['name']};

\$a = new {$class['classe']}();

\$b = new Not_{$class['classe']}();

?>
PHP;
    file_put_contents('tests/analyzer/source/'.$vendor.'/'.$vendor.'Usage.01.php', $source);

$exp = <<<PHP
<?php

\$expected     = array('{$class['classe']}',
                     );

\$expected_not = array('Not_{$class['classe']}',
                     );

?>
PHP;
    file_put_contents('tests/analyzer/exp/'.$vendor.'/'.$vendor.'Usage.01.php', $exp);
    
}

function generateVersion($vendor, $version, $previousVersion = null) {
    global $sqlite;
    
    print "Version for $vendor $version\n";

    $name = strtolower($vendor);
    $shortVersion = str_replace('.', '', $version);
    
    print './library/Exakat/Analyzer/'.$vendor.'/'.$vendor.$shortVersion.'Undefined.php'.PHP_EOL;
    if (file_exists('./library/Exakat/Analyzer/'.$vendor.'/'.$vendor.$shortVersion.'Undefined.php')) {
        print "$vendor $shortVersion already exists\n";
    } else {
        print "Creating $vendor/$vendor$shortVersion\n";
        shell_exec('php ./scripts/createAnalyzer '.$vendor.'/'.$vendor.$shortVersion.'Undefined' );
    }

    // Preparing the main file
$php = <<<PHP
<?php
/*
 * Copyright 2012-2017 Damien Seguy – Exakat Ltd <contact(at)exakat.io>
 * This file is part of Exakat.
 *
 * Exakat is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Exakat is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Exakat.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <http://exakat.io/>.
 *
*/

namespace Exakat\Analyzer\\$vendor;

use Exakat\Analyzer\Analyzer;

class {$vendor}{$shortVersion}Undefined extends {$vendor}Missing {
    public function dependsOn() {
        return array('$vendor/{$vendor}Usage');
    }

    public function analyze() {
        \$this->version = '$version';
        
        parent::analyze();
    }
}

?>

PHP;
    file_put_contents('library/Exakat/Analyzer/'.$vendor.'/'.$vendor.$shortVersion.'Undefined.php', $php);
    print "Written library/Exakat/Analyzer/$vendor/$vendor{$shortVersion}Undefined.php\n";

    // prepare documentation
    // Get one class and one that is not in this version

$query = <<<SQL
SELECT namespacesA.name || "\\" || cit.name AS name, cit.name AS classe FROM cit
JOIN namespaces AS namespacesA
    ON cit.namespaceId = namespacesA.id
JOIN versions   
    ON namespacesA.versionId = versions.id
WHERE versions.version = "$version" AND
      cit.type = "class";

SQL;
$res = $sqlite->query($query);
$classesIn = array();
while($row = $res->fetchArray(\SQLITE3_ASSOC)) {
    $classesIn[] = $row['name'];
}

$query = <<<SQL
SELECT DISTINCT namespacesA.name || "\\" || cit.name AS name, cit.name AS classe FROM cit
JOIN namespaces AS namespacesA
    ON cit.namespaceId = namespacesA.id
JOIN versions   
    ON namespacesA.versionId = versions.id
WHERE versions.version != "$version" AND
      cit.type = "class";

SQL;
$res = $sqlite->query($query);
$classesAll = array();
while($row = $res->fetchArray(\SQLITE3_ASSOC)) {
    $classesAll[] = $row['name'];
}
    
    print count($classesIn)." classes in this version\n";
    print count($classesAll)." classes in other versions\n";

    $diff = array_diff($classesAll, $classesIn);
    print count($diff)." classes Not in this version\n";
    $classeKO = array_pop($diff);
    
    $diff = array_diff($classesIn, $classesAll);
    print count($diff)." classes Only in this version\n";
    $classeOnly = array_pop($diff);
    
    $classeOK = array_pop($classesIn);
    $classeOK = array('fqn'    => $classeOK,
                      'name'   => basename(str_replace('\\', '/', $classeOK)));
    $classeKO = array('fqn'    => $classeKO,
                      'name'   => basename(str_replace('\\', '/', $classeKO)));
    $classeOnly = array('fqn'  => $classeOnly,
                      'name'   => basename(str_replace('\\', '/', $classeOnly)));

    $statsVersion = getStats($sqlite, $version);
    $doc = "{$vendor} {$version} has {$statsVersion['class']} classes, {$statsVersion['trait']} traits and {$statsVersion['interface']} interfaces.".PHP_EOL;

// Upgrade default documentation with stats and informations. 
$docs = <<<DOC
name = "$vendor $version Undefined Classes";
description = "Classes, trait and interfaces that are undefined for $vendor $version.

$doc

";
clearphp = "";
exakatSince = "1.0.8";

DOC;
    file_put_contents('human/en/'.$vendor.'/'.$vendor.$shortVersion.'Undefined.ini', $docs);

    // prepare one test
    $extraTest   = '';
    $extraExpOK  = '';
    $extraExpKO  = '';

    if (!empty($classeKO['fqn'])) {
        $extraTest   .= PHP_EOL.'$c = new '.$classeKO['fqn'].'(); '.PHP_EOL;
        $extraExpOK  .= '\''.$classeKO['fqn'].'( )\',';
        $extraExpKO  .= '';
    } 

    if (!empty($classeOnly['fqn'])) {
        $extraTest   .= PHP_EOL.'$d = new '.$classeOnly['fqn'].'(); '.PHP_EOL;
        $extraExpOK  .= '';
        $extraExpKO  .= PHP_EOL.'                      \''.$classeOnly['fqn'].'( )\',';
    } 

    if ($classeOK['fqn'] != $classeOK['name']) {
        $extraTest   .= PHP_EOL.'$e = new '.substr($classeOK['fqn'], 0,  - strlen($classeOK['name'])).'Not_'.$classeOK['name'].'(); '.PHP_EOL;
        $extraExpOK  .= '';
        $extraExpKO  .= PHP_EOL.'                      \''.substr($classeOK['fqn'], 0, - strlen($classeOK['name'])).'Not_'.$classeOK['name'].'( )\',';
    } 

$source = <<<PHP
<?php

use {$classeOK['fqn']};

\$a = new {$classeOK['name']}();

\$b = new Not_{$classeOK['name']}();
$extraTest

?>
PHP;
    file_put_contents('tests/analyzer/source/'.$vendor.'/'.$vendor.$shortVersion.'Undefined.01.php', $source);

$exp = <<<PHP
<?php

\$expected     = array($extraExpOK
                     );

\$expected_not = array('Not_{$classeOK['name']}( )',
                      '{$classeOK['name']}( )',$extraExpKO
                     );

?>
PHP;
    file_put_contents('tests/analyzer/exp/'.$vendor.'/'.$vendor.$shortVersion.'Undefined.01.php', $exp);
}

function generateMissing($vendor) {
    if (file_exists('library/Exakat/Analyzer/'.$vendor.'/'.$vendor.'Missing.php')) {
        print " Exakat/Analyze/$vendor/{$vendor}Missing.php already exists : omitting\n"; 
        return;
    }
    
    $name = strtolower($vendor);

$php = <<<PHP
<?php
/*
 * Copyright 2012-2017 Damien Seguy – Exakat Ltd <contact(at)exakat.io>
 * This file is part of Exakat.
 *
 * Exakat is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Exakat is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Exakat.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <http://exakat.io/>.
 *
*/

namespace Exakat\Analyzer\\{$vendor};

use Exakat\Analyzer\Analyzer;
use Exakat\Data\\{$vendor};

class {$vendor}Missing extends Analyzer {
    protected \$version = '1.0';
    
    public function dependsOn() {
        return array('{$vendor}/{$vendor}Usage');
    }
    
    public function analyze() {
        \$analyzer = \$this->dependsOn();
        \$analyzer = \$analyzer[0];

        \$data = new {$vendor}(\$this->config->dir_root.'/data', \$this->config);
        \$classes = \$data->getClasses('$name' , \$this->version);
        \$classes = array_pop(\$classes);
        
        \$this->analyzerIs(\$analyzer)
             ->fullnspathIsNot(\$classes);
        \$this->prepareQuery();
    }
}

?>

PHP;
    file_put_contents('library/Exakat/Analyzer/'.$vendor.'/'.$vendor.'Missing.php', $php);

}

function generateData($vendor) {
    if (file_exists('library/Exakat/Data/'.$vendor.'.php')) {
        print " Exakat/Data/$vendor.php already exists : omitting\n"; 
        return;
    }

    $name = strtolower($vendor);
$php = <<<PHP
<?php
/*
 * Copyright 2012-2017 Damien Seguy – Exakat Ltd <contact(at)exakat.io>
 * This file is part of Exakat.
 *
 * Exakat is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Exakat is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Exakat.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <http://exakat.io/>.
 *
*/


namespace Exakat\Data;

class {$vendor} extends Data {
    public function __construct(\$path, \$is_phar) {
        parent::__construct('$name', \$path, \$is_phar);
    }

    public function __destruct() {
        parent::__destruct();
    }
}

?>


PHP;
    file_put_contents('library/Exakat/Data/'.$vendor.'.php', $php);

}

function getStats($sqlite, $version) {
    
    $query = <<<SQL
    SELECT type, count(*) AS count FROM cit
    JOIN namespaces AS namespacesA
        ON cit.namespaceId = namespacesA.id
    JOIN versions   
        ON namespacesA.versionId = versions.id
    WHERE versions.version = "$version" 
    GROUP BY type
    
SQL;
    $res = $sqlite->query($query);

    $stats = array('trait' => 0, 'class' => 0, 'interface' => 0);
    while($row = $res->fetchArray(\SQLITE3_ASSOC)) {
        $stats[$row['type']] = $row['count'] == 0 ? 'zero' : $row['count'];
    }

    return $stats;
}

?>