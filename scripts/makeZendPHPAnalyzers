<?php

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$component = 'zend-permissions-acl';

if (!file_exists('projects/'.$component)){
    die("No such project as $component. Aborting\n");
}

processComponent($component);

$sqlite = new \Sqlite3('data/zendf3.sqlite');
$res = $sqlite->query('SELECT * FROM components 
    JOIN releases ON releases.component_id = components.id
    WHERE components.component = "'.$component.'"');

while($row = $res->fetchArray(\SQLITE3_ASSOC)) {
    processRelease($component, str_replace('release-', '', $row['release']));
}

function processRelease($component, $version) {
    if (!empty($version)) {
        $version3 = substr($version, 0, 3);
        $version2 = $version[0].$version[2];
    } else {
        $version3 = '';
        $version2 = '';
    }
    $componentShort = ucfirst(str_replace('zend-', '', str_replace('-', '-', $component)));
    $className = 'Zf3'.$componentShort.$version2;
    
    if (file_exists('library/Exakat/Analyzer/ZendF/'.$className.'.php')) {
        print $className." already exists. Skipping.\n";
        return;
    }

    $php = <<<PHP
<?php
/*
 * Copyright 2012-2017 Damien Seguy – Exakat Ltd <contact(at)exakat.io>
 * This file is part of Exakat.
 *
 * Exakat is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Exakat is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Exakat.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <http://exakat.io/>.
 *
*/

namespace Exakat\Analyzer\ZendF;

use Exakat\Analyzer\Analyzer;

class $className extends Zf3ComponentMissing {
    public function dependsOn() {
        return array('ZendF/Zf3$componentShort');
    }

    public function analyze() {
        \$this->component = '$component';
        \$this->version = '$version3';
        
        parent::analyze();
    }
}

?
PHP;
    $php .= '>';

    file_put_contents('library/Exakat/Analyzer/ZendF/'.$className.'.php', $php);

    print 'php exakat analyze -p project -P ZendF/'.$className.' -v'."\n";

    // Make docs
    $exakatVersion = \Exakat\Exakat::VERSION;
    $zend3 = new \Exakat\Data\ZendF3(__DIR__.'/../data/', false);
    
    $countClasses = getCounts('Classes', $zend3, $component, substr($version, 0, 3));
    $countInterfaces = getCounts('Interfaces', $zend3, $component, substr($version, 0, 3));
    $countTraits = getCounts('Traits', $zend3, $component, substr($version, 0, 3));

    if (version_compare($version, '2.5.0') > 0) {
        $new = array();
        $removed = array();

        $versions = $zend3->getVersions($component);
        $id = array_search($version, $versions);
        $previousVersion = $versions[$id - 1];
        
        // Classes
        $previousClasses = $zend3->getClasses($component, substr($previousVersion, 0, 3));
        $classes = $zend3->getClasses($component, substr($version, 0, 3));
        $diff = array_diff($classes['release-'.$version], $previousClasses['release-'.$previousVersion]);
        if (!empty($diff)) {
            $new[] = count($diff)." new classe".(count($diff) > 1 ? 's' : '')." \n";
        }
        $diff = array_diff($previousClasses['release-'.$previousVersion], $classes['release-'.$version]);
        if (!empty($diff)) {
            $removed[] = count($diff)." removed classe".(count($diff) > 1 ? 's' : '')." \n";
        }

        // Interfaces
        $previousInterfaces = $zend3->getInterfaces($component, $component, substr($previousVersion, 0, 3));
        if (empty($previousInterfaces)){
            $previousInterfaces = array('release-'.$previousVersion=>array());
        }
        $interfaces = $zend3->getInterfaces(substr($version, 0, 3));
        if (empty($interfaces)){
            $interfaces = array('release-'.$version=>array());
        }
        $diff = array_diff($interfaces['release-'.$version], $previousInterfaces['release-'.$previousVersion]);
        if (!empty($diff)) {
            $new[] = count($diff)." new interface".(count($diff) > 1 ? 's' : '')." \n";
        }
        $diff = array_diff($previousInterfaces['release-'.$previousVersion], $interfaces['release-'.$version]);
        if (!empty($diff)) {
            $removed[] = count($diff)." removed interface".(count($diff) > 1 ? 's' : '')." \n";
        }

        // Traits
        $previousTraits = $zend3->getTraits($component, substr($previousVersion, 0, 3));
        if (empty($previousTraits)){
            $previousTraits = array('release-'.$previousVersion=>array());
        }
        $traits = $zend3->getTraits($component, substr($version, 0, 3));
        if (empty($traits)){
            $traits = array('release-'.$version=>array());
        }
        $diff = array_diff($traits['release-'.$version], $previousTraits['release-'.$previousVersion]);
        if (!empty($diff)) {
            $new[] = count($diff)." new trait".(count($diff) > 1 ? 's' : '')." \n";
        }
        $diff = array_diff($previousTraits['release-'.$previousVersion], $traits['release-'.$version]);
        if (!empty($diff)) {
            $removed[] = count($diff)." removed trait".(count($diff) > 1 ? 's' : '')." \n";
        }
        
        if (empty($new)) {
            $new = '';
        } else {
            $new = implode(', ', $new).'.';
        }
        if (empty($removed)) {
            $removed = '';
        } else {
            $removed = implode(', ', $removed).'.';
        }
    } else {
        $new = "";
        $removed = '';
        
        $classes = array( $version => array('File'));
        $previousClasses = array( '2.5.0' => array('AuthEventTestListener'));
    }
    $ini = <<<INI
name = "$component $version Undefined Classes";
description = "$component classes, interfaces and traits that are not defined in version $version.

$component $version has $countClasses classes, $countTraits traits and $countInterfaces interfaces;

$new $removed See also : `$component <https://github.com/zendframework/$component>`_ and `Zend Framework <https://framework.zend.com/>`_.

";
clearphp = "";
exakatSince = "$exakatVersion";

INI;

    file_put_contents('human/en/ZendF/'.$className.'.ini', $ini);
    
    // Creation of tests
    
    shell_exec("cd tests/analyzer/; php create_test.php ZendF/$className");
    $allClasses = $zend3->getClasses($component);
    $allClasses = array_merge(...array_values($allClasses));
    $allClasses = array_keys(array_count_values($allClasses));

    $classes = $zend3->getClasses($component, substr($version, 0 ,3))['release-'.$version];
    
    $classOK = $classes[0];

    $diff = array_values(array_diff($allClasses, $classes));
    if (empty($diff)) {
        $classKO = '1';
        $classKO_exp = '';
    } else {
        $classKO = 'new '.$diff[0].'()';
        $classKO_exp = "'".$diff[0]."( )'";
    }

    $php = <<<PHP
<?php

\$ok = $classOK();

\$ko = $classKO;

?>
PHP;
    
    file_put_contents('tests/analyzer/source/ZendF/'.$className.'.01.php', $php);

    $php = <<<PHP
<?php

\$expected     = array($classKO_exp);

\$expected_not = array('$classOK( )');

?>
PHP;
    
    file_put_contents('tests/analyzer/exp/ZendF/'.$className.'.01.php', $php);

    // add to sqlite
    $analyzersSqlite = new Sqlite3('data/analyzers.sqlite');
    $category = 'ZendF';
    
    $idZendF = $analyzersSqlite->query("SELECT id FROM categories WHERE name='ZendFramework'")->fetchArray();
    $idZendF = $idZendF[0];
    
    $analyzersSqlite->query("INSERT INTO analyzers ('folder', 'name') VALUES ('$category', '$className')");
    $id = $analyzersSqlite->lastInsertRowID();
    
    $analyzersSqlite->query("INSERT INTO analyzers_categories VALUES ('$id', '$idZendF')"); 
    // 38 is id for All
    $analyzersSqlite->query("INSERT INTO analyzers_categories VALUES ('$id', 38)"); 
    unset($analyzersSqlite);
}

function processComponent($component) {
    $componentShort = ucfirst(str_replace('zend-', '', str_replace('-', '-', $component)));
    $className = 'Zf3'.$componentShort;
    
    if (file_exists(__DIR__.'/../library/Exakat/Analyzer/ZendF/'.$className.'.php')) {
        print "$component already exists\n";
        return;
    }

    $exakatVersion = \Exakat\Exakat::VERSION;
    $zend3 = new \Exakat\Data\ZendF3(__DIR__.'/../data/', false);
    
    $versions = $zend3->getVersions($component);
    if (empty($versions)) {
        print "No versions for $component\n";
        die();
    } elseif( $versions[0] !== '2.5.0') {
        print "No version 2.5.0 for $component\n";
        die();
    }

    $php = <<<PHP
<?php
/*
 * Copyright 2012-2017 Damien Seguy – Exakat Ltd <contact(at)exakat.io>
 * This file is part of Exakat.
 *
 * Exakat is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Exakat is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Exakat.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <http://exakat.io/>.
 *
*/

namespace Exakat\Analyzer\ZendF;

use Exakat\Analyzer\Analyzer;

class $className extends Zf3Component {
    public function analyze() {
        \$this->component = '$component';
        
        parent::analyze();
    }
}

?
PHP;
    $php .= '>';

    file_put_contents('library/Exakat/Analyzer/ZendF/'.$className.'.php', $php);

    print 'php exakat analyze -p project -P ZendF/'.$className.' -v'."\n";

    // Make docs
    
    if (count($versions) === 1) {
        $docVersion = 'This covers version '.$versions[0];
    } elseif (count($versions) === 2) {
        $docVersion = 'This covers all two versions '.$versions[0].' and '.$versions[1];
    } else {
        $english = [2 => 'two', 3 => 'three', 4 => 'four', 5 => 'five', 6 => 'six', 7 => 'seven'];
        $docVersion = 'This covers all '.$english[count($versions)].' versions, from '.$versions[0].' to '.$versions[count($versions) - 1].'.';
    }
    
    $countClasses = getCounts('Classes', $zend3, $component);
    $countInterfaces = getCounts('Interfaces', $zend3, $component);
    $countTraits = getCounts('Traits', $zend3, $component);
    
    $ini = <<<INI
name = "$component Usage";
description = "$component usage, based on classes, interfaces and traits. $docVersion.

$component has $countClasses classes, $countTraits traits and $countInterfaces interfaces;

See also : `$component <https://github.com/zendframework/$component>`_ and `Zend Framework <https://framework.zend.com/>`_.

";
clearphp = "";
exakatSince = "$exakatVersion";

INI;

    file_put_contents('human/en/ZendF/'.$className.'.ini', $ini);
    
    // Creation of tests
    
    shell_exec("cd tests/analyzer/; php create_test.php ZendF/$className");
    $allClasses = $zend3->getClasses($component);
    $allClasses = array_merge(...array_values($allClasses));
    $allClasses = array_keys(array_count_values($allClasses));

    $classOK = $allClasses[0];

    $classKO = $classOK.'\\NotZend';

    $php = <<<PHP
<?php

\$ok = new $classOK();

\$ko = new $classKO();

?>
PHP;
    
    file_put_contents('tests/analyzer/source/ZendF/'.$className.'.01.php', $php);

    $php = <<<PHP
<?php

\$expected     = array('$classOK( )');

\$expected_not = array('$classKO( )');

?>
PHP;
    
    file_put_contents('tests/analyzer/exp/ZendF/'.$className.'.01.php', $php);    

    // add to sqlite
    $analyzersSqlite = new Sqlite3('data/analyzers.sqlite');
    $category = 'ZendF';
    
    $idZendF = $analyzersSqlite->query("SELECT id FROM categories WHERE name='ZendFramework'")->fetchArray();
    $idZendF = $idZendF[0];
    
    $analyzersSqlite->query("INSERT INTO analyzers ('folder', 'name') VALUES ('$category', '$className')");
    $id = $analyzersSqlite->lastInsertRowID();
    
    $analyzersSqlite->query("INSERT INTO analyzers_categories VALUES ('$id', '$idZendF')"); 
    // 38 is id for All
    $analyzersSqlite->query("INSERT INTO analyzers_categories VALUES ('$id', 38)"); 
    unset($analyzersSqlite);
}

function getCounts($type, $zend3, $component, $version = null) {
    $f = 'get'.$type;
    $x = $zend3->$f($component, $version);
    if (empty($x)) {
        $r = 'no';
    } else {
        $r = count(array_unique(array_merge(...array_values($x))));
    }
    return $r;
}

?>