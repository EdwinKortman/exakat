<?php

$filename = $argv[1];

if (!file_exists($filename)) {
    print "No such file as '$filename'. Aborting\n";
}

$tokens = token_get_all(file_get_contents($filename));

$variables = array();
foreach($tokens as $token) {
    if (is_array($token) && ($token[0] == T_VARIABLE)) {
        $variables[] = substr($token[1], 1);
    }
}

$variables = array_count_values($variables);

$php_variables = array_flip(array('argv', '_GET', '_POST', '_COOKIE'));
$short_variables = array_flip(array('i', 'a', 'x'));

$variables = array_diff_key($variables, $php_variables, $short_variables);

// remove compulsory variables that won't make it
// check for case (is it important?)
// configure for French or languages (dictionaries for pspell)
// make this directory-recursive by default
// list spots for easy fixing
// make suggestions
// record one's dictionary
// 

$notations = array();
$volumes = array();

$spell_errors = 0;
foreach($variables as $variable => $count) {
    $notation = detectNotation($variable);
    if (!spell_check($variable)) {
        $spell_errors++;
        echo "'$variable' : ".$notation.' '. join(', ', breakIntoWords($variable))."\n";
    }
    @$notations[$notation]++;
    @$volumes[$notation] += $count;
}

print "Variable styles : \n";
$total = array_sum($notations);
$totalVolume = array_sum($volumes);
foreach($notations as $notation => $count) {
    print "  $notation".str_repeat(' ', 20 - strlen($notation)).": $count (".number_format($count / $total * 100, 2)."%) | {$volumes[$notation]} (".number_format($volumes[$notation] / $totalVolume * 100, 2)."%)\n";
}
print "  Total               : $total           | $totalVolume\n";
print "\n";
print "Spelling $spell_errors / ".count($variables)." variables\n";

function spell_check($string) {
    static $pspell;
    static $tolerated;
    
    if ($pspell === null) { $pspell = pspell_new("en"); }
    
    if ($tolerated === null) { 
        $tolerated = array_flip(array('conf', 'id', 'in', 'for', 'regex', 'php', 'dir', 'dirs', 'config', 'filename', 'nb', 'url', 'json')); 
    };
    
    $parts = breakIntoWords($string);
    foreach($parts as $part) {
        if (isset($tolerated[$part])) {
            continue 1;
        }
        
        if (pspell_check($pspell, $part)) {
            continue 1;
        }
        
        return false;
    }
    return true;
}

function detectNotation($string) {
    if (strpos($string, '_')) {
        return 'snake_case';
    }
    
    if ($string == strtolower($string)) {
        return 'alllowercase';
    }
    
    return 'camelCase';
}

function breakIntoWords($string) {
    $notation = detectNotation($string);
    
    switch ($notation) {
     case 'alllowercase' : 
        if ($return = preg_split('#[0-9]+#', $string)) {
            return array_filter( $return, 'cbNotEmpty');
        } else {
            return array($string);
        }
        
    case 'camelCase' : 
        $return = preg_split('#(?!=[a-z])(?=[0-9A-Z])#', $string);
        $return = array_map('strtolower', $return);
        return $return;
    
    case 'snake_case' : 
        return explode('_', $string);

    default : 
        print "No such string type as '$notation'. Ignoring\n";
        return array();
    }
}

function cbNotEmpty($value) {
    return !empty($value);
}

?>