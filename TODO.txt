Architecture
Add a install checker, that will check how is the installation of the analyzer
Support file updates in VCS (just change those files, not reload all the application, serve évolutions, not status)
Make use of index for better speed
Make so that it is possible to run simultaneous scripts on the server (Not just using delete all).
Make analyzer concurrent proof
Finish running shuffle tests on analyzer
Add a instant log to show progression of analyzer / loader
Make loader run simultaneous scripts
Rank the regex in terms of probability for faster processing
Make tokenizer with 2 stages : low stage, with simple expressions, and upper stage, with more complexe structures.
Find a way to reduce the number of stored objects and link in the loader
Note stats at each stage of the processing for later analitical review
Log information about speed of process (tokens, files, etc).
Export to SQLITE
Stabilize the Unit tests for tokenizer
Break done tokenizer to blocks : analyze happens within blocks, not the whole file. Smaller analyze, faster results, even concurrency, and less analyzers. 
Export progress/ETA in processing (tokenizer, analyzer...)
Prepare documentation

Cooccurences : structures that are next to each other in sequences.

Support environnment information : 
file, namespace, class, method.
Add link information (indexed, location, normal).

Analyzers
+ Interpret values and have a dictionary of special meaning : 22 => port, 86400 => day list, etc.
+ Make a list of files and extensions along the way

projects/proxyplus/code/includes/parser.php:			$parseFunction = $block == 'style' ? 'CSS' : 'JS' ;
projects/proxyplus/code/includes/parser.php:			$new .= $this->$parseFunction(substr($input, $innerStart, $innerEnd - $innerStart));


Update variables with the above code
Make report configurable (configuration of the actual analyzers to be run), and automatically build.

Continue spoting the ghost bug, and find a faster reproduction case (best case : )
Test neo4j on a linux machine : more stable ? faster ? 
Rerun all tests unit and make them stable
Check all unit test with the new Identifier token
Change Class to support options like we do for functions

Reconcile String with some detectors : list of country, SQL code, JS code, CSS code, HTML code, regex, HTTP headers, etc. 
Detect databases : large arrays of values. 

Detect PHP extensions : php, php3, inc : search for the files.

@$stats['dir']++; : $stats should be 
Inventory of keys in array.
Variables that are looking like : $var1 and $varl, $var0 and $varO, $var and $vars


Variable that bear special names (PHP variables, other library variables, global, Formating, spelling).

Detect encoding for the strings ? 

Reintroduce the php -l tests in the loader : add a cache to avoir re-test ? 
Check for short tags opening and list them in the Appinfo()

Centralize all option reading in one class/file.
Scope change between a method and the one in the parent classes.

Variables : 
Camel case, underscore separated, Spelling, $[type]Name ($sString, $iId,), variables with numbers or sharing prefixes).

Export analyze to Sqlite for stats

Supporting different versions of PHP : in the analyzer (so as to test situations), and as the engine (can we run the application as PHP-xxx ? ).
Centralize config.ini : add new values, have an overview of the configs.
Centralize results : define a format for centralizing information (start with appinfo ? With some of the inventory ? )
Export to database : CSV or Sqlite or SQL, for reuse. 
Add a deamon to project, that scans then start
Build a test project for the reports styles (avoid md/pdf pb)
Brush up the report 
Add exemples from the found code to the explanations. 
Make a summary to the report (how to share this ? When to involve the author ? Needs a special intermediate report ? )
Apply all the old analyzers from cornac
Check spelling in variables/classe names
Export tool for extensions (versioning ?)
Long variables with "" that should actually be ' because they don't contain any variable.
Add a config for the whole analyzer
Add logs in project : stops if tokenizer/fullcode do break. Alert me.
Export data collected in mysql to a graph

Mettre wordpress sous git
Avoir un outil pour pousser le site en ligne depuis Git

Namespace inventory as a tree.
Mention file extensions/list used for testing in audit information

Check Try, and add an indexClean when we reach the end of the catchs.
Exécuter les scripts une fois par heure, après peu de modifications. 
Spot fluid interfaces

Spot useless extension (and suggest removing them). : how to know which extensions ? WOrk on default PHP conf. 
Test rapide sur un seul file (Exclure les analyses impossibles).
Identify languages in UTF8 strings by spoting the unicode groups (http://en.wikipedia.org/wiki/Unicode_block)
Spot classes with too many constants (they cost memory)
Suppress all g.V and make this at least some Index
Spot overwritten class constants.
Suspect implicit conversion
Marquer les analyzers non fait comme tel (pas indexistants)
Check for unqualified names of classes : they shouldn't be too generic.
List Nsnames aliases and overlap
Spot obsolete functions

Check for argument number (PHP doesn't, but yells at runtime).
Faire la liste des extensions standards de PHP (et donc, celles non standards)
Faire un extracteur d'extensions PHP (Notamment PECL, mais aussi via code source, avec versionnage).
Mark analyzers as file or application wide analyzer. 

Make the php script idempotent (can be run again and finish the job, leave a note where it left...)
Spot function that are defined with php-function names (also spot overwriting).
Faire un dashboard avec les indicateurs du projet lui-même : manquent de tests, manques de traductions / documentations.

Check for size of ODT: 
rm: ./projects/wave/report.odt: No such file or directory
Stack space overflow: current size 8388608 bytes.
Use `+RTS -Ksize -RTS' to increase it.
Aliases : Classes that extends others, but do no overloading; functionst that returns one call of other function

Useless unset() 
Constant functions or structures (always return the same...)

Intersection between use and the actual classes being used.
Check __set_state : if there is a new in the parent, and the set state isn't overloaded, the final object is not of expected type.

For UnicodeBlock, merge the blocks into languages 
Unset non existing variable (useless)

List errors of visibility between classes 
Detect strings that are used as an Array (then, spot the index, and check for the strings in those indexes)

Function called with too many or too few arguments
Prepare nodes to be added to new network (function calls, variable track...)

Spot several definition for constants
Spot variable used in definitions

Update dashboard with number of analyzer and inventory or appinfo
Test treemap to export from bin/file
bin/file should also sort PHP files/directories by type : see fb treemap : code, scripts, media, tests, config. ...

Separate analyzers in : file/application; themes
produce a dot graph of classes

Automate testing and dashboard

hardcoded logins // pass
paraleliser les analyzers

Spot the exceptions and the one that are thrown, and the one caught. 
spot use with no compound name and no namespace. They are ignored.
Spot try {} that are stopped below by another try.

add support for phar
lighten the FILE link in the database (not the size of the produced CSV ).
Check that Namespaces (specially Global) cannot be there several times.
You should not throw an extension exception yourself (PDO)

AND / && and OR / ||. http://stackoverflow.com/questions/2803321/and-vs-as-operator
// display the actual hierarchy (add parenthesis?)

Complex logical expression, without ().
Commented Code

Un paramètre inutilisé dans une méthode qui en étant une autre est OK (C'est alors a relier à la généralisation induite par la classe du dessus, on peut aussi commenter les autres classes.)

Faire une class MySQL separée
Faire une class Stats separée

Spot identical files and avoir double analyse (.... ?)
Spot useless namespaces (namespace x; no function/classs/interface/constant)

upgrade regex search with result from thinkphp
Spot URL in strings
Improve regex for PCRE
spot usage of ereg 

Mark Namespaces that are constants as such 

print_r(xxx, true) is not a pb.
Check report for incompilable : they don't show in appinfo nor as an analyzer
Check appinfo for constant names, redeclared PHP functions, empty classes
Report variable : warning, should not be mistaken by references

SectionedHashtable : Ignore empty sections
Report : indicate when the value is N/A (trait for PHP 5.3)
Spot useless code, such as variable or scalar alone on an instruction.

Desactiver ArrayNS en fonction des versions de PHP qui tournent.
Spot trailing white space on PHP code (before and after <?php ?>)
Support phar files (digg them and find the local php files).

Check for ordering with case/default
Add time of processing in the ReportInfo

Create a dummy project for fast testing of installation
Check for for() and remove arguments 

reinstall sqlite export
fix the last 'indexed' in tokenizer

spot #! lines and mark the file as executable commandline
check that report are all done in default

List empty scripts, just like incompilables
Make a diagramm of the differents layers of the software

Update Ace/Hastable to suppoort the actual number of columns (just like Horizontal report).

Report usage of alternative syntax mixed with normal one.
Report usage of alternative syntax in appinfo()
Report usage of one-liner in appinfo 

Extensions may defined Namespaces (check them for conflict... ?)
CHeck that Classes and file have the same names.
Support namespaces when searching for classes.

Calculate a ratio of whitespace / comment / code
Make stats on the type of comment (//, /*, # )

Make a dummy project to check all the analyzers in the same time (find a way to report which are tested or not automatically. May be comments ? )
Make an export to JSON format for testing purpose.

Must call parent constructor (desctructor ? )
Must have desctructor's classes (when ? Closing resources are needed ? Like what ? )
Empty blocks ( try/catch, etc.)
in regex, several successive call will fill the same $r, and if not tested, it may lead to believe there are some results
function whose return may be ignored

Test with Neo4j 2.1 and the batch inserter.

See if I can move those g.idx['index'][['token':'']].out. to something shorter (and faster). 
Check how index degrades with size (compare with the previous).

Create a checker for the Format (they need a number of classes, and dependences).
Record all scripts's running time. 

Check file names for special chars ($ or 把).

analyzer names are sensitive to case. Make sure this is not a problem.
Faire un Content avec des métrics (Nombre d'arguments, longueur de line, nombre de constants... etc...)

Export class hierarchy, UML documents, etc.
Reference of a $value and the last array element remain even after the foreach loop. It is recommended to destroy it by unset(). : check reuse of blind variables between arrays
Summary of traits's methods overlap (local to class, trait, inherited class). 
Traits of Traits
silently resolved conflicts in traits (overlapping local/trait/trait/class)
Supports uploaded files 
share standard with different chapters (files, sockets, uploaded_file, etc....)

parent keyword used in class where no extension.
Functions that return always the same value, no matter what 
Constant structures

Make a report for the classes that tells what methods are actually used (their origin, base on static/self, etc…), with an indicator for the level of complexity.

Functions without returns, and not Methods.

Manage non-fatal error during lint phase (list the files that are showing some STRICT errors as a bulk). 

Manage a 'fullnspath' that will tell the absolute path name of a class/function/constant (either to search...)

Faire un rapport général type PHPLOC, mentionner la quantité de valeur littéral dans le code. Faire une bande avec tous les fichiers les uns après les autres (ordonné?) et assigner une couleur à chaque type de notions (structure, littéral, opérateur, variable)

Signaler la consommation de mémoire à la compilation : aka, les constants sont toutes chargées dès le début, si elles sont trop nombreuses, c'est pas bon. Calculer cet embonpoint. 
Calculer les dépendances de chaque classes (dépendance obligatoire, dépendance conditionnelle, coût total).

Inventory of transport (list from PHP code)
UseVoidReturn : function return void/null, but result it captured (may be not used...)
TooManyArgument : for PHP functions and for custom code
RequiredAfterOptionalParam : optional parameters are the last on the argument list
report 'true' (wrongly compared boolean)
Die without no argument (at least, put __METHOD__, file)
Echo : with or without () (preferences)
Use const or define() for constants ? 
unsupported calls in strings ("$x[a][b]")
inventory of registered functions (session, finalize, error...)
Characterize function as library (not global code), or script
Detect long switch, if elseif...
check this outside methods
check for $THIS (and other variables with special meaning but wrong case ? )
global versus $GLOBALS
Overwritten methods / constante 
Command Query Separation : Functions should either do something or answer something. That’s practical and clear advice.
Avoid output arguments (&$arguments, that will be modified...)
Have No Side Effects : effect on something else
Identify the Unit tests, based on the library : simpletest, Atoum, Phpunit, phpt ? 
SQL Should use binded parameters, not concatenation in string
Instanciation of interfaces ?!?
Cyclic dependancies between traits
Modified arguments (bad idea! )
Used twice variable (set then given... Nothing between ? )
        if ( ($counts = $r->check()) || in_array($name , array("FunctioncallArray", 'Sequence'))) { $count is ambiguous
Identify complex logical expressions (in If, while, case....) with mathd, logical and AND
Check that 'OR' is actually spotted as an upper case keyword
Research that AND and && pb 
Identify date() formats (and sprintf too)

Map/Reduce : Faire marcher les analyses du tokenizer sur des intervalles dans les index 
Ajouter des while au lieu des ifs, notamment pour les structures récursives
Utiliser les index pour les résolutions (g.idx('resolution')[['class':name]] = g.v(100);
Spot void in arrays 
Expressions that should be on the same line (@ unlink, ! )
array() may be useless instruction (warning to inner methodcall...)
! may have pb like @ (2 on one line)
Spot configuration that are not well used (ini_set('others', 3) => useless....)
Spot very deep code (lots of {{{{{{{}}}}}}}
Super global aliases ($x = $_GET, f($_GET)...)
method with parent:: but no actual parent.
undefined static (using self or the class name)
classes extends classes, implements interfaces (cannot extends classes)
Heavily used class/interface/etc.
Spot external libraries
Ignore the lib folder
Spot PEAR classes
Code source that mix defintiions (class, interface, const...) and actual code (except for protection against direct access..).
Spot multiple-class files, multiple-namespace files
Corriger le calcul du nombre de fichiers qui ne sont pas compilables
Faire un 2eme dashboard
Faire un Rapport de compatibilité : up and down. Sous forme de tableau (versions puis features qui limitent (rouge, vert, orange, bleu pour les gains possibles)
Publier le site.
Add an analyzer of the application : As documentation, version, tests, external libs, languges, template, config.... Report this, and exclude some of the elements in the code.
Surveiller le chinois dans le HTML
Spot expressions that are the same (cf str_replace I used...)
Spot files that use $this, and that are actually included in PHP methods (old style PHP inclusion)
support T_ELLIPSIS in arguments for _Function

support PHP 5.6 importation of functions and constants (use function xxx, use const yyy)
Chez UnresolvedClasses 7 for conflict between aliases and declaration (Use in one namespace, class in another).
Spot use clause that are in the same namespace (just alias ? )

what happens when there are 100 arguments available for isRead and isModified ? (what happens when there is more than that? )
WrongCase : also apply to Use instruction
Check for use instruction for StaticProperty...
signaler l'habitude avec use (Un use? )
SIgnaler les use qui ne sont pas en haut du namespace)
signaler les pb de casse avec les alias
absolute use without alias are useless.
Function-subscripting,-old-style : not mentionned if the variable is used twice after the call().
multiple index defintion : spot the values
casting with long names (boolean, integer) instead of short ones (int, bool)
support arrays representation of the index with { or [ in the atom (needs to be collected).

Lister les dépendances d'une classe (liste des autres classe, des fonctions, etc..)
scripts with warning (but no fatal) are excluded while they should be in.
Tag files if they are definition only, global script, or mixed. Remove some of the normal code.
SPot shadowed static members (name name, )
Spot change in PPP for members/functions
spot uses which original is used, but not the alias

Upgrade the 'randomtest' for PHPunit, with a sqlite table that track the number of test done, and randomize the oldest ones and the failed ones first.

Ternary that doesn't yield the same kind of results (print/ 1)
unused constants

Identify the use of static and self and mention there is a difference in usage. 
make stats of usage of parent, self, static. 
Classes that are not found are classified as wrong case for calling (bug)
vérifier le support de zmq

scripter la liste des extensions sur pecl.php.net
suggest Use and aliases to reduce code size.
combine several uses in one (prefix instead of classes)
understand the strategy of use.

Classes/UnusedPrivateProperties : Not done on alpharpc ?? No tokenizer.final report...
Several instructino in the same line : compare line with > not ==, so as to has f( \n g($x)) spotted.

when there is no namespace, what to find? I should put a default namespace 

alpharpc


Add a way to ignore some vendors dependings on project.
Add a way to overwrite / add / nullify some data from within a project.
Wrong number of arguments : to be fixed

Suggest properties to be ppp depending on usage (public => outusage, properted => child/parents, private : local class)
composer.json generator or checker 
Suggest closures instead of functions if the function is used once. 
Suggest replacement for str_replace/ereg/preg/strtr

vérifier pourquoi Label, basé sur T_COLON, reste présent : Je pense qu'il n'est pas nettoyé par les autres qui s'en servent.
vérifier les 		mysql_query($sql) or ($output .= mysql_error());
et les experssion or die();!
Conditional declarations ?

Heavily used classes/functions...
Add a top5 for files to check

rethrown exceptions in a catch

Using empty() with Function Calls and Expressions : $x = $object->getProperty(); empty($x)

PHP 5.5 : foreach loops now support non-scalar keys. I need to find the Iterator and make sure it returns array. 
// loading (on process a file, then pour everything in the file). 

Attention : Use may be used to change method visibility. Report this and also note this better in the analzyer.
Add report on aliases changing the visibility.

== suggest to merge all those lines into one
        $severities = array();
        $severities['Critical'] = 3;
        $severities['Major'] = 2;
        $severities['Minor'] = 1;
        $severities['None'] = 0; 

Spot functions / global code mixed.

Find similar files
Spot common libraries...

Finish ConstantConditions 

Expose a list of difference between 2 versions of an application (API changed? existence, signature, impacted functions.)
List of impacted methods (calling, data is changed for the original method to )

Fin configuration directive that should will have an impact on the code. 
Spot multiple aliases with the same names (compile but won't run)

        public $array = [
            self::ONE => 'Eclipse',
            'Sublime',
            'PHPStorm',
        ];
        Possible overwrite of array indices (before PHP 5.6)

Using File upload ? 
Using handlers (Set_*_handlers)

Functions / methods may be a tube (mixing arguments) or changing some state.

// Useless code ?  (THen make this more complexe, with variable written 1, read 1, further apart.
        $info = $this->data->getInfo();
        $renderer->render($output, $info);

Funciton subscription new style 

Conservation de la skin entre les pages

in CHeck for Unused private properties, removed properties used as append[] or objects (methods or properties)
Test for list to be in a namespace (\list may fail). Check for other functions that actually lead to a functioncall.

Some methods are meant to return nothing : construct/destruct, some of the magic methods, test/setup/teardown in phpunit...
Functions that return nothing needs to have special things in them : global, ini_set, ...

Clean the analyzer sqlite database.
$x->property but property is not defined and (class) $x is defined with __get() or __set();

Spot properties that will be handled by __get et __set()
spot magical properties.
Spot methods that are not compatible with typehint

Add a way to configure the analyzer at file level (PHP DOC), or an external list (analyzer.ignore + others)
