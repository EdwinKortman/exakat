Support file updates in VCS (just change those files, not reload all the application, serve évolutions, not status)
Make so that it is possible to run simultaneous scripts on the server (Not just using delete all).
Make analyzer concurrent proof

Make loader run simultaneous scripts

Make tokenizer with 2 stages : low stage, with simple expressions, and upper stage, with more complexe structures.
Find a way to reduce the number of stored objects and link in the loader
Note stats at each stage of the processing for later analitical review
Log information about speed of process (tokens, files, etc).

Export progress/ETA in processing (tokenizer, analyzer...)

Prepare documentation

Cooccurences : structures that are next to each other in sequences.

Analyzers
+ Make a list of files and extensions along the way

projects/proxyplus/code/includes/parser.php:			$parseFunction = $block == 'style' ? 'CSS' : 'JS' ;
projects/proxyplus/code/includes/parser.php:			$new .= $this->$parseFunction(substr($input, $innerStart, $innerEnd - $innerStart));

Update variables with the above code
Make report configurable (configuration of the actual analyzers to be run), and automatically build.

Continue spoting the ghost bug, and find a faster reproduction case (best case : )
Check all unit test with the new Identifier token
Change Class to support options like we do for functions

Reconcile String with some detectors : list of country, SQL code, JS code, CSS code, HTML code, regex, HTTP headers, etc. 
Detect databases : large arrays of values. 

Inventory of keys in arrays, by array

Variables that are looking like : $var1 and $varl, $var0 and $varO, $var and $vars, vars with a switch in the letters only

Variable that bear special names (PHP variables, other library variables, global, Formating, spelling).

Reintroduce the php -l tests in the loader : add a cache to avoir re-test ? 

Scope change between a method and the one in the parent classes.

Variables : 
Camel case, underscore separated, Spelling, $[type]Name ($sString, $iId,), variables with numbers or sharing prefixes).

Export analyze to Sqlite for stats

Centralize results : define a format for centralizing information (start with appinfo ? With some of the inventory ? )

Add a deamon to project, that scans then start
Build a test project for the reports styles (avoid md/pdf pb)

Add exemples from the found code to the explanations. 
Make a summary to the report (how to share this ? When to involve the author ? Needs a special intermediate report ? )
Check spelling in variables/classe names : 
  Spin this as an external project

Export tool for extensions (versioning ?)
Long variables with "" that should actually be ' because they don't contain any variable.

Export data collected in mysql to a graph

Namespace inventory as a tree.
Mention file extensions/list used for testing in audit information

Spot useless extension (and suggest removing them). : how to know which extensions ? WOrk on default PHP conf. 
Faire la liste des extensions standards de PHP (et donc, celles non standards)

Create a quick analysis, for one file only (exclude some application wide analysis).
Mark analyzers as file or application wide analyzer. 

Spot classes with too many constants (they cost memory)
Suppress all g.V and make this at least some Index
Spot overwritten class constants.
Suspect implicit conversion
Marquer les analyzers non fait comme tel (pas inexistants)
Check for unqualified names of classes : they shouldn't be too generic.
List Nsnames aliases and overlap


Make the php script idempotent (can be run again and finish the job, leave a note where it left...)
Spot function that are defined with php-function names (also spot overwriting).
Faire un dashboard avec les indicateurs du projet lui-même : manquent de tests, manques de traductions / documentations.

Aliases : Classes that extends others, but do no overloading; 

functions that returns one call of other function

Useless unset() (http://php.net/unset)
Unset non existing variable (useless), static variables, global variables (except with $GLOBALS), locals one (out of a loop)

Constant functions or structures (always return the same...)

Check __set_state : if there is a new in the parent, and the set state isn't overloaded, the final object is not of expected type.

For UnicodeBlock, merge the blocks into languages 

List errors of visibility between classes 
Detect strings that are used as an Array (then, spot the index, and check for the strings in those indexes)

Function called with too many or too few arguments
Prepare nodes to be added to new network (function calls, variable track...)

Spot variable used in definitions

Update dashboard with number of analyzer and inventory or appinfo
Test treemap to export from bin/file
bin/file should also sort PHP files/directories by type : see fb treemap : code, scripts, media, tests, config. ...

produce a dot graph of classes

paraleliser les analyzers

Spot the exceptions and the one that are thrown, and the one caught. 
spot use with no compound name and no namespace. They are ignored.
Spot try {} that are stopped below by another try.

add support for phar (will search inside the phar for scripts)
lighten the FILE link in the database (not the size of the produced CSV ).
Check that Namespaces (specially Global) cannot be there several times.
You should not throw an extension exception yourself (PDO)

// display the actual hierarchy in a complex logical expression (add parenthesis?)

Complex logical expression, without ().
Commented Code
First support comments in exakat

Un paramètre inutilisé dans une méthode qui en étend une autre est OK (C'est alors a relier à la généralisation induite par la classe du dessus, on peut aussi commenter les autres classes.)

Spot identical files and avoir double analyse (.... ?)
Spot useless namespaces (namespace x; no function/classs/interface/constant)

upgrade regex search with result from thinkphp
Spot URL in strings
Spot SQL in strings
Improve regex for PCRE

Mark Namespaces that are constants as such 

print_r(xxx, true) is not a pb.

Support phar files (digg them and find the local php files).

Check for ordering with case/default
Add time of processing in the ReportInfo

Create a dummy project for fast testing of installation

fix the last 'indexed' in tokenizer

spot #! lines and mark the file as executable commandline

List empty scripts, just like incompilables
Make a diagramm of the differents layers of the software

CHeck that Classes and file have the same names.

Calculate a ratio of whitespace / comment / code
Make stats on the type of comment (//, /*, # )

Make a dummy project to check all the analyzers in the same time (find a way to report which are tested or not automatically. May be comments ? )
Make an export to JSON format for testing purpose.

Must call parent constructor (destructor ? )
Must have desctructor's classes (when ? Closing resources are needed ? Like what ? )
in regex, several successive call will fill the same $r, and if not tested, it may lead to believe there are some results
function whose return may be ignored

Check how index degrades with size (compare with the previous).

Create a checker for the Format (they need a number of classes, and dependences).
Record all scripts's running time. 

Check file names for special chars ($ or 把).

analyzer names are sensitive to case. Make sure this is not a problem.
Faire un Content avec des métrics (Nombre d'arguments, longueur de line, nombre de constants... etc...)

Export class hierarchy, UML documents, etc.
Summary of traits's methods overlap (local to class, trait, inherited class). 
Traits of Traits
silently resolved conflicts in traits (overlapping local/trait/class)

share standard with different chapters (files, sockets, uploaded_file, etc....)

Functions that return always the same value, no matter what 
Constant structures (with only literals, so the whole is not changing anytime)

Make a report for the classes that tells what methods are actually used (their origin, base on static/self, etc…), with an indicator for the level of complexity.

Functions without returns and not interacting elsewhere (ini_set changes system), and not Methods.

Manage non-fatal error during lint phase (list the files that are showing some STRICT errors as a bulk). 

Faire un rapport général type PHPLOC, mentionner la quantité de valeur littéral dans le code. Faire une bande avec tous les fichiers les uns après les autres (ordonné?) et assigner une couleur à chaque type de notions (structure, littéral, opérateur, variable)

Signaler la consommation de mémoire à la compilation : aka, les constants sont toutes chargées dès le début, si elles sont trop nombreuses, c'est pas bon. Calculer cet embonpoint. 
Calculer les dépendances de chaque classes (dépendance obligatoire, dépendance conditionnelle, coût total).

Inventory of transport (list from PHP code)
UseVoidReturn : function return void/null, but result it captured (may be not used...)

report 'true' (wrongly compared boolean)
Die without no argument (at least, put __METHOD__, file)
Echo : with or without () (preferences)

inventory of registered functions (session, finalize, error...)
Characterize function as library (not global code), or script
Detect long switch, if elseif...

global versus $GLOBALS
Overwritten methods / constante 
Command Query Separation : Functions should either do something or answer something. That’s practical and clear advice.
Avoid output arguments (&$arguments, that will be modified...)
Have No Side Effects : effect on something else

Identify the Unit tests, based on the library : simpletest, Atoum, Phpunit, phpt ? 
SQL Should use binded parameters, not concatenation in string

Cyclic dependancies between traits
Modified arguments (bad idea! )
Used twice variable (set then given... Nothing between ? )
        if ( ($counts = $r->check()) || in_array($name , array("FunctioncallArray", 'Sequence'))) { $count is ambiguous
Identify complex logical expressions (in If, while, case....) with mathd, logical and AND
Check that 'OR' is actually spotted as an upper case keyword
Identify date() formats (and sprintf too)

Map/Reduce : Faire marcher les analyses du tokenizer sur des intervalles dans les index 

Expressions that should be on the same line (@ unlink, ! )
! may have pb like @ (2 on one line)
Spot configuration that are not well used (ini_set('others', 3) => useless....)
Spot very deep code (lots of {{{{{{{}}}}}}}

Heavily used class/interface/etc.
Spot external libraries
Ignore the lib folder
Code source that mix defintiions (class, interface, const...) and actual code (except for protection against direct access..).

Add an analyzer of the application : As documentation, version, tests, external libs, languges, template, config.... Report this, and exclude some of the elements in the code.

Spot expressions that are the same (cf str_replace ...)
Spot files that use $this, and that are actually included in PHP methods (old style PHP inclusion)
Suggest using ... instead of func_get_args, and ... instead of call_user_func_array

Spot use clause that are in the same namespace (just alias ? )

what happens when there are 100 arguments available for isRead and isModified ? (what happens when there is more than that? )
WrongCase : also apply to Use instruction
Check for use instruction for StaticProperty...
signaler l'habitude avec use (Un use? )

SIgnaler les use qui ne sont pas en haut du namespace)
signaler les pb de casse avec les alias
multiple index defintion : spot the values
casting with long names (boolean, integer) instead of short ones (int, bool)
support arrays representation of the index with { or [ in the atom (needs to be collected).

Lister les dépendances d'une classe (liste des autres classe, des fonctions, etc..)
scripts with warning (but no fatal) are excluded while they should be in.
Tag files if they are definition only, global script, or mixed. Remove some of the normal code.
SPot shadowed static members (name name, )
Spot change in PPP for members/functions
spot uses which original is used, but not the alias

Upgrade the 'randomtest' for PHPunit, with a sqlite table that track the number of test done, and randomize the oldest ones and the failed ones first.

Ternary that doesn't yield the same kind of results (print/ 1)
unused constants

Identify the use of static and self and mention there is a difference in usage. 
make stats of usage of parent, self, static. 
Classes that are not found are classified as wrong case for calling (bug)

scripter la liste des extensions sur pecl.php.net
suggest Use and aliases to reduce code size.
combine several uses in one (prefix instead of classes)
understand the strategy of use.

Classes/UnusedPrivateProperties : Not done on alpharpc ?? No tokenizer.final report...
Several instruction in the same line : compare line with > not ==, so as to has f( \n g($x)) spotted.

Add a way to ignore some vendors dependings on project.
Add a way to overwrite / add / nullify some data from within a project.

Suggest properties to be ppp depending on usage (public => outusage, properted => child/parents, private : local class)
composer.json generator or checker 

Suggest closures instead of functions if the function is used once. 
Suggest replacement for str_replace/ereg/preg/strtr

Conditional declarations ?

Heavily used classes/functions...

rethrown exceptions in a catch

Using empty() with Function Calls and Expressions : $x = $object->getProperty(); empty($x)

PHP 5.5 : foreach loops now support non-scalar keys. I need to find the Iterator and make sure it returns array. 
// loading (on process a file, then pour everything in the file). 

Attention : Use may be used to change method visibility. Report this and also note this better in the analzyer.
Add report on aliases changing the visibility.

== suggest to merge all those lines into one
        $severities = array();
        $severities['Critical'] = 3;
        $severities['Major'] = 2;
        $severities['Minor'] = 1;
        $severities['None'] = 0; 

Spot functions / global code mixed.

Find similar files
Spot common libraries...

Finish ConstantConditions 

Expose a list of difference between 2 versions of an application (API changed? existence, signature, impacted functions.)
List of impacted methods (calling, data is changed for the original method to )

Spot multiple aliases with the same names (compile but won't run)

Functions / methods may be a tube (mixing arguments) or changing some state.

// Useless code ?  (THen make this more complexe, with variable written 1, read 1, further apart.
        $info = $this->data->getInfo();
        $renderer->render($output, $info);

Conservation de la skin entre les pages

in CHeck for Unused private properties, removed properties used as append[] or objects (methods or properties)
Test for list to be in a namespace (\list may fail). Check for other functions that actually lead to a functioncall.

Some methods are meant to return nothing : construct/destruct, some of the magic methods, test/setup/teardown in phpunit...
Functions that return nothing needs to have special things in them : global, ini_set, ...

$x->property but property is not defined and (class) $x is defined with __get() or __set();

Spot properties that will be handled by __get et __set()
spot magical properties.
Spot methods that are not compatible with typehint

Add a way to configure the analyzer at file level (PHP DOC), or an external list (analyzer.ignore + others)

Variable used once : Ignore arguments if func_get_args is used.
Never used properties : check for classes below!
Never used properties : if (in_array($key, self::$_allowableAttributes[$tag])) { ($_allowableAttributes!!

Find nested incompatible conditions like this : (Also over multiples functions calls...)
                if ($destination > 0) { 
                        if ($destination == 0) {


List stacked conditions and spot if they are incompatible

Empty function that override another are not useless. 

$a['b'] = 3;  print "$a[b]\n"; : b is not a constant! 

Validate magic methods arguments in the definition

Add support for PHP 7 and for multiple PHP installation (and for missing PHP installs)
Merge all PHP versions into one table + 1 colon of selection

project_init store the initial URL in config.ini (git, or download or else)
project_init works with only URL (guess some names)

Add documentation automatically in human/en/*/*.ini (via dashboard but spot when they needs to be written)

$fp = fopen('scripts/categories.md', 'r');   while (!feof($fp)) { (No check! This will go on if file doesn't exists...)
// usage of ressource without checking it really

Remove the 2 mysql databases and merge into one only.  (why not merge into one Sqlite? )

See how checkForNext and makeSequence may be reduced to one call in neo4j (precompiled java or custom steps)

Add link to clearPHP in the docs. 

Make projectsize report non-bin/files'ed project 
make projectsize update vcs
make projectsize collect size in sqlite (not in mysql) and list of project + origin (for export )

Check for the exact count of nodes and relations at the end (compare g.V.count() with the count of useful nodes and relations. Add stats about index and their amounts).

In this folder, this and that is always the same. Why not in this one? (extensions, use, methods, )

List checks for data consistancy : 
+ php_functions list (is is all the other *.ini ? Same for interface, constant, trait, etc.)
+ aliases extensions?
+ Reference in function call ? 
+ Obsolete liste ? 
+ extensions in appinfo ? 

Finish overloaded for property/methods

testBySecond : testMethods are not used (neither setUp nor tearDown)

directInjection : Ignore 'secure' functions such as htmlentities, intval, isset

List contaminated variables ($x = $_POST..)

$whiteList = explode(",","xls,xlsx,ods,sxc,csv,tsv,ppt,pps,odp,sxi,doc,docx,rtf,odt,sxw"); // better make it an array directly...

die or throw ? May be die is useless and should be down by throwning all the time and adding an exception handler to stop the script. 

        if (isSet($httpVars["file"])) {
            $parts = parse_url($httpVars["file"]);
            $getPath = $parts["path"];
            $basename = basename($getPath);
        }
        if (isSet($httpVars["dlfile"])) {
            $dlFile = $streamData["protocol"]."://".$repository->getId().AJXP_Utils::decodeSecureMagic($httpVars["dlfile"]);
            $realFile = file_get_contents($dlFile);
            if(empty($realFile)) throw new Exception("cannot find file $dlFile for download");
            $parts = parse_url($realFile);
            $getPath = $parts["path"];
            $basename = basename($getPath);
        }
        basename may end up not initialized with any kind of value...
        
Methods returns various type (null, array, boolean...)

Accept scripts that throw warnings but still compile.

Clean bin and script folders

Validate that all files in a project are useful (check for classes + autoload, includes, mentions of scripts in open_files, etc..)

Check speed for one file processing

Loop optimisation : anything in the loop that may be done outside? 

Spot methods that do not use $this (<- static ? )

SPot : files direct access protection (defined('_JEXEC') or die('Restricted access') }

Complete the list of directive in Content/Directives
Add a list of directive spotted in the code

Finishes the following standard extensions : 
interbase
dotnet
xdiff

Check on reference returning functions (they should be called with reference).

Link referenced variables together

Check on reference returning functions : are they well used received? 

Evaluate the % of dynamic code in the code (% of tokens? Of variables? )

Check that returning function are actually used. 

Fatal error: Cannot increment/decrement overloaded objects nor string offsets in /Users/famille/Desktop/analyze/scripts/spelling on line 48
Can we detect that? 

Find uninitialised variables (read first, then written (or not))

Add support for traits when searching for properties/methods/constants….

Remove require when installing with composer (no need to download everything...)

if(in_array('malicious', array('a','b','c',0,1,2,3))) echo 'ok'; (in_array with integers will be erroneous...)

File should define or run but not both.

move all logs to be written directly in the project/<project>/log folder (no concurrency pb)

Constant with only one value (For constant conditions...)

Mark autoload sequences (so as to set them aside for the next rules. Also, make a list of dependencies as a reference list (autoload -> spotted/ignored. Config and mentionned in report).

Finish the 'superglobal propagation'

Spot twin lines ($x++; $x++; ...)

Add a 'config.ini' class, that will create and check the config.ini files.

Spot undefined properties (used with $this, but not in the PPP of the class nor its parents)

Error messages like mysqli_error (or pg_error(), etc) are PHP incoming (should be treated like that)

Finish DefinedProperties 

Spot magic properties in parents or traits

Spot traits and have them linked to class, not inside code. 
Structure better classes (outgoing links to methods, ppp, constants, etc. No in a Sequence but keep the ranking...)

Constant condition (PHPci : IS_WIN, while (fgets($sock)) { /**/ } )

remove usage of argv and replace with Config

Make various stats (deep level, switch w/o default, single or double quotes, etc...). This will help running (or not) some analyzers. 

Check the league of extraordinary packages

Enhanced Punit (for unit tests)

FuelPHP : 
Views are included; most properties are dynamical (defined in an array), framework is left out (many missing functions)

Test are TRUE (except for empty()). Otherwise, it just gets confusing. (An exception would be using ! empty(), as testing for false here is generally more intuitive.)

Add in the http://codex.wordpress.org/WordPress_Coding_Standards

Spot similar arrays (with the same values) and mention them.

separate Project name from its folder

Remove S_ARRAY indexing (keepIndexed should be good)

Warning
Internally, PHP strings are byte arrays. As a result, accessing or modifying a string using array brackets is not multi-byte safe, and should only be done with strings that are in a single-byte encoding such as ISO-8859-1.

Detect over-used functions (same variable get the same function called several time)

What size of code do I need to make a functioncall ? 

Mark functions as idempotent (f(f(n)) == f(n))

Suggest constant by locating identical strings/numbers in special places ( case, comparisons...) Is it faster? Can it be made faster by using constants?

Separate 'files' with the official test and a script for short-tags, and the other compilation files.

automatically exclude files with NEXT at the end of the tokenizer (separate script for cleaning).

Start using composer (autoload migration)

Add a readability test for PHP code (http://en.wikipedia.org/wiki/Flesch%E2%80%93Kincaid_readability_tests#cite_note-10, http://en.wikipedia.org/wiki/Automated_Readability_Index)

remove all usage of the common log folder

Top 5 des analyzeurs lents

Check that === null can be removed with a default object 
Tag strings as SQL (by regex, by usage)
List migration from PHP 5.2

in project, make the main process wait for the first // one to finish. This is not needed for longer projects, but for short ones.

Une global qui est utilisée dans une fonction pourrait être une static.

http://stackoverflow.com/questions/6913312/integer-is-not-being-shown-as-die-argument
Die/Exit won't display integers as argument

Add severity check in analyzer.php

magic number
constant interface
definition only
deep defintions

super global don't need to be called globals, but other PHP variables, Yes.

Spot that classes in a folder all extends one class above, and then, alert if some classes is not extending

Spot repeated code in a class (make this a property cache? ) 

Spot useless inclusions (include_once...)

Ternary is not protecting $_GET[]

Spot languages files (files with arrays of values) and ignore them by default (speed up the process, no much interest in those structures).
Suggest exporting large arrays 

Defined Properties should be used at least in the class itself

Support file extensions (and absence).
add a detector for file extensions (using grep? ) 

