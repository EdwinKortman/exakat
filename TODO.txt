Architecture
Add a install checker, that will check how is the installation of the analyzer
Support file updates in VCS (just change those files, not reload all the application, serve évolutions, not status)
Make use of index for better speed
Make so that it is possible to run simultaneous scripts on the server (Not just using delete all).
Make analyzer concurrent proof
Finish running shuffle tests on analyzer
Add a instant log to show progression of analyzer / loader
Make loader run simultaneous scripts
Rank the regex in terms of probability for faster processing
Make tokenizer with 2 stages : low stage, with simple expressions, and upper stage, with more complexe structures.
Find a way to reduce the number of stored objects and link in the loader
Note stats at each stage of the processing for later analitical review
Log information about speed of process (tokens, files, etc).
Export to SQLITE
Stabilize the Unit tests for tokenizer
Break done tokenizer to blocks : analyze happens within blocks, not the whole file. Smaller analyze, faster results, even concurrency, and less analyzers. 
Export progress/ETA in processing (tokenizer, analyzer...)
Prepare documentation


Start analyzer programm
+ Statistics
+ Dependencies
+ PHP version
+ Security
+ Maintenance
+ Framework specific rules / Good practises
+ Status

Cooccurences : structures that are next to each other in sequences.


Support environnment information : 
file, namespace, class, method.
Add link information (indexed, location, normal).


Analyzers
+ Interpret values and have a dictionary of special meaning : 22 => port, 86400 => day list, etc.
+ Make a list of files and extensions along the way


Variables are not variables when : 
they are used in compact (look for collision between string and variables)
they are indeed an argument (but unused arguments? come on)
they are a property
they have a { for name (variable variable)
projects/proxyplus/code/includes/parser.php:			$parseFunction = $block == 'style' ? 'CSS' : 'JS' ;
projects/proxyplus/code/includes/parser.php:			$new .= $this->$parseFunction(substr($input, $innerStart, $innerEnd - $innerStart));


Update variables with the above code
Make report configurable (configuration of the actual analyzers to be run), and automatically build.

Continue spoting the ghost bug, and find a faster reproduction case (best case : )
Test neo4j on a linux machine : more stable ? faster ? 
Rerun all tests unit and make them stable
Check all unit test with the new Identifier token
Change Class to support options like we do for functions

Reconcile String with some detectors : list of country, SQL code, JS code, CSS code, HTML code, regex, HTTP headers, etc. 
Detect databases : large arrays of values. 

Detect PHP extensions : php, php3, inc : search for the files.

@$stats['dir']++; : $stats should be 
Inventory of keys in array.
Variables that are looking like : $var1 and $varl, $var0 and $varO, $var and $vars


Variable that bear special names (PHP variables, other library variables, global, Formating, spelling).

Detect encoding for the strings ? 

Reintroduce the php -l tests in the loader : add a cache to avoir re-test ? 
Check for short tags opening and list them in the Appinfo()

Centralize all option reading in one class/file.
Scope change between a method and the one in the parent classes.

Variables : 
Camel case, underscore separated, Spelling, $[type]Name ($sString, $iId,), variables with numbers or sharing prefixes).

Export analyze to Sqlite for stats

Supporting different versions of PHP : in the analyzer (so as to test situations), and as the engine (can we run the application as PHP-xxx ? ).
Centralize config.ini : add new values, have an overview of the configs.
Centralize results : define a format for centralizing information (start with appinfo ? With some of the inventory ? )
Export to database : CSV or Sqlite or SQL, for reuse. 
Add a deamon to project, that scans then start
Build a test project for the reports styles (avoid md/pdf pb)
Brush up the report 
Add exemples from the found code to the explanations. 
Make a summary to the report (how to share this ? When to involve the author ? Needs a special intermediate report ? )
Apply all the old analyzers from cornac
Check spelling in variables/classe names
Inventory for constants
Export tool for extensions (versioning ?)
Long variables with "" that should actually be ' because they don't contain any variable.
Add a config for the whole analyzer
Add logs in project : stops if tokenizer/fullcode do break. Alert me.
Export data collected in mysql to a graph

Mettre wordpress sous git
Avoir un outil pour pousser le site en ligne depuis Git

Namespace inventory as a tree.
Mention file extensions/list used for testing in audit information
Set up the themes for the analyzers
Remove Class_tmp

Check Try, and add an indexClean when we reach the end of the catchs.
Exécuter les scripts une fois par heure, après peu de modifications. 
Spot fluid interfaces

Spot useless extension (and suggest removing them). : how to know which extensions ? WOrk on default PHP conf. 
Test rapide sur un seul file (Exclure les analyses impossibles).
Identify languages in UTF8 strings by spoting the unicode groups (http://en.wikipedia.org/wiki/Unicode_block)
Spot classes with too many constants (they cost memory)
Suppress all g.V and make this at least some Index
Spot overwritten class constants.
Suspect implicit conversion
Marquer les analyzers non fait comme tel (pas indexistants)
Check for unqualified names of classes : they shouldn't be too generic.
List Nsnames aliases and overlap
Spot obsolete functions

Check for argument number (PHP doesn't, but yells at runtime).
Faire la liste des extensions standards de PHP (et donc, celles non standards)
Faire un extracteur d'extensions PHP (Notamment PECL, mais aussi via code source, avec versionnage).
Mark analyzers as file or application wide analyzer. 
Inconsistent constants casing (null/NULL)

Make the php script idempotent (can be run again and finish the job, leave a note where it left...)
Spot function that are defined with php-function names (also spot overwriting).
Faire un dashboard avec les indicateurs du projet lui-même : manquent de tests, manques de traductions / documentations.

Check for size of ODT: 
rm: ./projects/wave/report.odt: No such file or directory
Stack space overflow: current size 8388608 bytes.
Use `+RTS -Ksize -RTS' to increase it.
Aliases : Classes that extends others, but do no overloading; functionst that returns one call of other function

Useless unset() 
Constant functions or structures (always return the same...)

Intersection between use and the actual classes being used.
Check __set_state : if there is a new in the parent, and the set state isn't overloaded, the final object is not of expected type.

For UnicodeBlock, merge the blocks into languages 
Unset non existing variable (useless)

List errors of visibility between classes 
Detect strings that are used as an Array (then, spot the index, and check for the strings in those indexes)

Function called with too many or too few arguments
Prepare nodes to be added to new network (function calls, variable track...)

Spot several definition for constants
Spot variable used in definitions

Update dashboard with number of analyzer and inventory or appinfo
Test treemap to export from bin/file
bin/file should also sort PHP files/directories by type : see fb treemap : code, scripts, media, tests, config. ...

Separate analyzers in : file/application, inventory/analyse; themes
produce a dot graph of classes

Automate testing and dashboard

hardcoded logins // pass
paraleliser les analyzers

Spot the exceptions and the one that are thrown, and the one caught. 
spot use with no compound name and no namespace. They are ignored.
Spot try {} that are stopped below by another try.

add support for phar
lighten the FILE link in the database (not the size of the produced CSV ).
Check that Namespaces (specially Global) cannot be there several times.
You should not throw an extension exception yourself (PDO)

AND / && and OR / ||. http://stackoverflow.com/questions/2803321/and-vs-as-operator
// display the actual hierarchy (add parenthesis?)

Complex logical expression, without ().
Commented Code

Un paramètre inutilisé dans une méthode qui en étant une autre est OK (C'est alors a relier à la généralisation induite par la classe du dessus, on peut aussi commenter les autres classes.)

Faire une class MySQL separée
Faire une class Stats separée

Spot identical files and avoir double analyse (.... ?)
Spot useless namespaces (namespace x; no function/classs/interface/constant)

upgrade regex search with result from thinkphp
Spot URL in strings
Improve regex for PCRE
spot usage of ereg 

Mark Namespaces that are constants as such 

print_r(xxx, true) is not a pb.
Check report for incompilable : they don't show in appinfo nor as an analyzer
Check appinfo for constant names, redeclared PHP functions, empty classes
Report variable : warning, should not be mistaken by references

SectionedHashtable : Ignore empty sections
Report : indicate when the value is N/A (trait for PHP 5.3)
Spot useless code, such as variable or scalar alone on an instruction.

Desactiver ArrayNS en fonction des versions de PHP qui tournent.
Spot trailing white space on PHP code (before and after <?php ?>)
Support phar files (digg them and find the local php files).

Check for ordering with case/default
Add time of processing in the ReportInfo

Create a dummy project for fast testing of installation
Check for for() and remove arguments 

reinstall sqlite export
fix the last 'indexed' in tokenizer

spot #! lines and mark the file as executable commandline
check that report are all done in default

Check for empty __construct();

List empty scripts, just like incompilables
Make a diagramm of the differents layers of the software

Update Ace/Hastable to suppoort the actual number of columns (just like Horizontal report).

Report usage of alternative syntax mixed with normal one.
Report usage of alternative syntax in appinfo()
Report usage of one-liner in appinfo 

Check for double 'case' check. 

Extensions may defined Namespaces (check them for conflict... ?)
CHeck that Classes and file have the same names.
Support namespaces when searching for classes.

Calculate a ratio of whitespace / comment / code
Make stats on the type of comment (//, /*, # )