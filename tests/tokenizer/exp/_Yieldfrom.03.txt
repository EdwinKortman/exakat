<?php

Label : CODE
  ;
  Label : ELEMENT
    =
    Label : LEFT
      $i
    Label : RIGHT
      0
  Label : ELEMENT
    function
    Label : ARGUMENTS
      void
      Label : ARGUMENT
        void
    Label : NAME
      gen
    Label : BLOCK
      ;
      Label : ELEMENT
        try
        Label : CODE
          ;
          Label : ELEMENT
            yield
            Label : YIELD
              =>
              Label : VALUE
                0
              Label : KEY
                "gen"
        Label : CATCH
          catch
          Label : CODE
            ;
            Label : ELEMENT
              print
              Label : ARGUMENTS
                void
                Label : ARGUMENT
                  "
                  Label : CONTAINS
                    Concatenation
                    Label : CONCAT
                      $e
                    Label : CONCAT
                      \n
                    Label : CONCAT
                      catch in gen()\n
          Label : VARIABLE
            $e
          Label : CLASS
            Exception
      Label : ELEMENT
        yield from
        Label : YIELD
          from
          Label : ARGUMENTS
            void
            Label : ARGUMENT
              2
      Label : ELEMENT
        try
        Label : CODE
          ;
          Label : ELEMENT
            yield from
            Label : YIELD
              from
              Label : ARGUMENTS
                void
                Label : ARGUMENT
                  0
        Label : CATCH
          catch
          Label : CODE
            ;
            Label : ELEMENT
              print
              Label : ARGUMENTS
                void
                Label : ARGUMENT
                  "
                  Label : CONTAINS
                    Concatenation
                    Label : CONCAT
                      catch in gen()\n
                    Label : CONCAT
                      $e
                    Label : CONCAT
                      \n
          Label : VARIABLE
            $e
          Label : CLASS
            Exception
  Label : ELEMENT
    function
    Label : ARGUMENTS
      void
      Label : ARGUMENT
        $off
    Label : NAME
      from
    Label : BLOCK
      ;
      Label : ELEMENT
        try
        Label : CODE
          ;
          Label : ELEMENT
            yield
            Label : YIELD
              +
              Label : LEFT
                $off
              Label : RIGHT
                1
        Label : CATCH
          catch
          Label : CODE
            ;
            Label : ELEMENT
              print
              Label : ARGUMENTS
                void
                Label : ARGUMENT
                  "
                  Label : CONTAINS
                    Concatenation
                    Label : CONCAT
                      catch in from()\n
                    Label : CONCAT
                      $e
                    Label : CONCAT
                      \n
          Label : VARIABLE
            $e
          Label : CLASS
            Exception
      Label : ELEMENT
        yield
        Label : YIELD
          +
          Label : LEFT
            $off
          Label : RIGHT
            2
  Label : ELEMENT
    var_dump
    Label : ARGUMENTS
      void
      Label : ARGUMENT
        ->
        Label : OBJECT
          $gen
        Label : METHOD
          valid
          Label : ARGUMENTS
            void
            Label : ARGUMENT
              void
  Label : ELEMENT
    try
    Label : CODE
      ;
      Label : ELEMENT
        for
        Label : BLOCK
          ;
          Label : ELEMENT
            var_dump
            Label : ARGUMENTS
              void
              Label : ARGUMENT
                ->
                Label : OBJECT
                  $gen
                Label : METHOD
                  current
                  Label : ARGUMENTS
                    void
                    Label : ARGUMENT
                      void
        Label : INIT
          =
          Label : LEFT
            $gen
          Label : RIGHT
            gen
            Label : ARGUMENTS
              void
              Label : ARGUMENT
                void
        Label : FINAL
          ->
          Label : OBJECT
            $gen
          Label : METHOD
            valid
            Label : ARGUMENTS
              void
              Label : ARGUMENT
                void
        Label : INCREMENT
          ->
          Label : OBJECT
            $gen
          Label : METHOD
            throw
            Label : ARGUMENTS
              void
              Label : ARGUMENT
                new
                Label : NEW
                  Exception
                  Label : ARGUMENTS
                    void
                    Label : ARGUMENT
                      (string)
                      Label : CAST
                        ++
                        Label : POSTPLUSPLUS
                          $i
    Label : CATCH
      catch
      Label : CODE
        ;
        Label : ELEMENT
          print
          Label : ARGUMENTS
            void
            Label : ARGUMENT
              "
              Label : CONTAINS
                Concatenation
                Label : CONCAT
                  catch in {main}\n
                Label : CONCAT
                  \n
                Label : CONCAT
                  $e
      Label : VARIABLE
        $e
      Label : CLASS
        Exception
