#!/usr/bin/env php
<?php
use Everyman\Neo4j\Client,
	Everyman\Neo4j\Index\NodeIndex,
	Everyman\Neo4j\Relationship,
	Everyman\Neo4j\Node,
	Everyman\Neo4j\Gremlin,
	Tokenizer\Token;

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$client = new Client();

$args = $argv;
if ($id = array_search('-dot', $args)) {
    define('FORMAT', 'DOT');
} elseif ($id = array_search('-text', $args)) {
    define('FORMAT', 'TEXT');
} else {
    define('FORMAT', 'TEXT');
}

if ($id = array_search('-o', $args)) {
    define('FILE', $args[$id + 1]);
} else {
    define('FILE', false);
}

$queryTemplate = "g.V.except([g.v(0)])";
$params = array('type' => 'IN');
$query = new Gremlin\Query($client, $queryTemplate, $params);
$vertices = $query->getResultSet();

$V = array();
foreach($vertices as $v) {
    $V[$v[0]->getId()] =  $v[0]->getProperty('code');
    
    if ($v[0]->getProperty('root')) {
        $root = $v[0]->getId();
    }
}

$queryTemplate = "g.E";
$params = array('type' => 'IN');
$query = new Gremlin\Query($client, $queryTemplate, $params);
$edges = $query->getResultSet();

$E = array();
foreach($edges as $e) {
    $id = $e[0]->getStartNode()->getId();
    
    if (!isset($E[$id])) {
        $E[$id] = array();
    }
    $E[$id][$e[0]->getEndNode()->getId()] = $e[0]->getType();
}

if (!isset($root)) {
    print "No root! Check the tree in Neo4j\n Aborting\n";die();
}

if (FORMAT == 'DOT') {
    $text = display_dot($V, $E, $root);
} else {
    $text = display_text($V, $E, $root);
}

function display_text($V, $E, $root, $level = 0) {
    $r = '';
    
    $r .= str_repeat('  ', $level).$V[$root]."\n";
    if (isset($E[$root])) {
        foreach($E[$root] as $id => $label) {
            $r .= str_repeat('  ', $level)."Label : $label\n".display_text($V, $E, $id, $level + 1);
        }
    }
    
    return $r;
}

function display_dot($V, $E, $root, $level = 0) {
    $r = '';

    foreach($V as $id => $v) {
        $r .= $id." [label=\"".$v."\"];\n";
    }

    foreach($E as $start => $e) {
        foreach($e as $end => $label) {
            $r .= "$start -> $end [label=\"$label\"];\n";
        }
    }

    $r = " digraph graphname {
$r
 }";
    
    return $r;
}

if (FILE) {
    $fp = fopen(FILE, 'w+');
    fwrite($fp, $text);
    fclose($fp);
} else {
    print $text;
}

?>