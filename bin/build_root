#!/usr/bin/env php
<?php
use Everyman\Neo4j\Client,
	Everyman\Neo4j\Index\NodeIndex,
	Everyman\Neo4j\Relationship,
	Everyman\Neo4j\Node,
	Everyman\Neo4j\Gremlin,
	Tokenizer\Token;

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

if (in_array('-V', $argv)) {
    define('DISPLAY', true);
} else {
    define('DISPLAY', false);
}

if ($id = array_search('-p', $argv)) {
    $project = $argv[$id + 1];
} else {
    $project = 'None';
}

$begin = microtime(true);
$client = new Client();

$result = query("g.idx('racines')");
if ($result[0][0] != 'MANUAL[racines:Vertex]') {
    query("g.createManualIndex('racines', Vertex)");
}
    if (DISPLAY) print "created racines index\n";

$indices = array();
$res = query("g.getIndices()")->toArray();
foreach($res as $r) {
    $indices[] = substr($r[0], 7, strpos($r[0], ':') - 7);
}
    if (DISPLAY) print "getting all indices\n";

$faits = array();

$special_tokens = array('Integer', 'String', 'Identifier', 'Magicconstant',
                        'RawString', 'Variable', 'Float');
$tokens = array_merge(Token::getTokenizers(), $special_tokens);

foreach($tokens as $id => $class) {
    $fullclass = "\\Tokenizer\\$class";
    if (!isset($fullclass::$atom)) {
        if (DISPLAY) print "$id) $class : missing token\n";
        continue;
    }
    if (DISPLAY) print "$id) $class : creating\n";
 
    $token = $fullclass::$atom;
    if (in_array($token, $faits)) {
        continue; 
    } elseif (in_array($token, $indices)) {
        query("g.dropIndex('$token');");
    }

    query("g.createManualIndex('$token', Vertex)");
    $faits[] = $token;
    if (DISPLAY) print "$id) $class : created\n";
    
    if (in_array($class, $special_tokens)) {
        if (DISPLAY) print "$id) $class : filling\n";
        $query = "g.V.has('atom', '$token').each{ g.idx('$token').put('token', 'node', it); }";
        query($query);
        if (DISPLAY) print "$id) $class : filled\n";
    }
}

if (DISPLAY) print "Creating index done\n";

// creating the neo4j Index, old style (That will be removed);
query("g.V.has('token', 'INDEX').out('INDEXED').each{ g.idx('racines').put('token', it.token, it); };");

if (DISPLAY) print "Indexing racines done\n";

// creating the neo4j Index, old style (That will be removed);
query("g.V.has('root', 'true').each{ g.idx('racines').put('token', 'ROOT', it); };");

if (DISPLAY) print "Indexing root done\n";

// calculating the Unicode blocks
query("g.idx('racines')[['token':'S_STRING']].out('INDEXED').filter{it.code.replaceAll(/^['\"]/, '').size() > 0}.each{ it.setProperty('unicode_block', it.code.replaceAll(/^['\"]/, '').toList().groupBy{ Character.UnicodeBlock.of( it as char ).toString() }.sort{-it.value.size}.find{true}.key.toString()); };");

if (DISPLAY) print "String unicode done\n";

$end = microtime(true);

//$db = new Db('exakat');
//$db->query("INSERT INTO build_root (tokens, duration, project) VALUES ('$project', )");

function query($query) {
    global $client;
    $params = array('type' => 'IN');
    try {
        $GremlinQuery = new Gremlin\Query($client, $query, $params);
        return $GremlinQuery->getResultSet();
    } catch (Exception $e) {
        $fp = fopen('log/build_root.log', 'a');
        fwrite($fp, "Sleeping...\n");
        fwrite($fp, $query."\n");
        fclose($fp);
        
        print $e->getMessage();
        die('died in '.__METHOD__."\n");
    }
}

?>