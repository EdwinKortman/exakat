#!/usr/bin/env php
<?php
use Everyman\Neo4j\Client,
	Everyman\Neo4j\Index\NodeIndex,
	Everyman\Neo4j\Relationship,
	Everyman\Neo4j\Node,
	Everyman\Neo4j\Gremlin,
	Tokenizer\Token;

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$client = new Client();

//
$result = query("g.idx('racines')");
if ($result[0][0] != 'MANUAL[racines:Vertex]') {
    query("g.createManualIndex('racines', Vertex)");
}
query("g.V.has('index', 'true').each{ g.idx('racines').put('token', it.token, it); };");
print "Indexing done\n";

query("g.V.has('atom', 'String').filter{it.code.replaceAll(/^['\"]/, '').size() > 0}.each{ it.setProperty('unicode_block', it.code.replaceAll(/^['\"]/, '').toList().groupBy{ Character.UnicodeBlock.of( it as char ).toString() }.sort{-it.value.size}.find{true}.key.toString()); };");
print "String unicode done\n";

function query($query) {
    global $client;
    $params = array('type' => 'IN');
    try {
        $GremlinQuery = new Gremlin\Query($client, $query, $params);
        return $GremlinQuery->getResultSet();
    } catch (Exception $e) {
        $fp = fopen('log/build_root.log', 'a');
        fwrite($fp, "Sleeping...\n");
        fwrite($fp, $query."\n");
        fclose($fp);
        
        sleep(2);
        query($query);
    }
}

?>