#!/usr/bin/env php
<?php
use Everyman\Neo4j\Client,
	Everyman\Neo4j\Index\NodeIndex,
	Everyman\Neo4j\Relationship,
	Everyman\Neo4j\Node,
	Everyman\Neo4j\Gremlin,
	Tokenizer\Token;

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$args = $argv;

if ($id = array_search('-v', $args)) {
    define('VERBOSE', true);
} else {
    define('VERBOSE', false);
}

$begin_time = microtime(true);
$classes = array(
    'Magicconstant',
    'Variable', 
    'Integer',
    'Float',
    'Boolean',
    'String',
    'Sign',
    '_Array',
    'Property',
    'Keyvalue',
    '_Function',
    'Staticproperty',
    'Methodcall',
    'Staticmethodcall',
    'Staticconstant',
    'Logical',
    'Heredoc',
    'Not',
    'Reference',
    'Arrayappend',
    '_Instanceof',
    '_New',
    '_Global',
    'Nsname',
    '_Include',
    'Preplusplus',
    'Postplusplus',
    'Noscream',
    'Parenthesis',
    'Concatenation',
    'Arguments',
    'Functioncall',
    'Multiplication',
    'Addition', 
    '_Var',
    '_Ppp',
    'Assignation',
    'Comparison',
    'Ternary',
    'Constant',
    '_Return',
    'Sequence',
    '_Const',
    'Block',
    '_Class',
    'Ifthen',
    '_Foreach',
    '_While',
    'Phpcode',
// Void
);

$client = new Client();

$regex = array();
foreach($classes as $class) {
    $new = "Tokenizer\\$class";
    $regex[$class] = new $new($client);
}

$total = Tokenizer\Token::countTotalToken();
$count = Tokenizer\Token::countLeftToken() + 1;

$extra_rounds = 7;
$prev = array();
for($i = 0; $i < $extra_rounds + 1; $i++) {
    $prev[$i] = $count + $i;
}
$round = 0;

while(check_prev($prev, $extra_rounds)) { 
//    print "$count $prev $prevprev\n";
//    print 'Next count : '.Token::countLeftToken()."\n";
    $round++;
    
    array_unshift($prev, $count);
//    print_r($prev);

    $r = array_pop($regex);
    $r->resetReserve();
    array_push($regex, $r);
    foreach($regex as $name => $r) {
//        print count($prev)." $name\n";
        $r->check();
        
//        if ($name == "Block" && count($prev) == 12) { die(__METHOD__); }
//        if ($name == "Sequence" && count($prev) == 12) { die(__METHOD__); }
        $r->reserve();
    }
    unset($precedence);

//    print 'Next count : '.Token::countLeftToken()."\n";
    if ($count = Token::countLeftToken()) {
        display( "$round) Remains $count of $total tokens to process! \n");
    } else {
        display( "$round) All $total tokens have been processed! \n");
        break 1;
    }
}

Token::cleanHidden();
$end_time = microtime(true);
display("Total time : ".number_format(($end_time - $begin_time) * 1000, 2, '.', ' ')."ms\n");
// @todo display checks processed

function check_prev($prev, $extra_rounds) {
    $b = false;
    for($i = 0; $i < $extra_rounds; $i++) {
        $b = $b || ($prev[$i + 1] > $prev[$i]);
    }
    return $b;
}

function array_flatten($array, $level = 1) {
    $r = array();
    
    foreach($array as $a) {
        if ($level > 1 && is_array($a)) {
            $a = array_flatten($a, $level - 1);
        }
        $r = array_merge($r, $a);
    }
    
    return $r;
}

function display($message) {
    if (VERBOSE) {
        print $message;
    }
    // @todo put in log too ? 
}
?>