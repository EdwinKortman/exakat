#!/usr/bin/env php
<?php
use Everyman\Neo4j\Client,
	Everyman\Neo4j\Index\NodeIndex,
	Everyman\Neo4j\Relationship,
	Everyman\Neo4j\Node,
	Everyman\Neo4j\Gremlin,
	Tokenizer\Token;

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$args = $argv;

if ($id = array_search('-v', $args)) {
    define('VERBOSE', true);
} else {
    define('VERBOSE', false);
}

$begin_time = microtime(true);
$classes = array(
    'Variable', 
    'Integer',
    'Float',
    'Boolean',
    'String',
    'Sign',
    '_Array',
    'Property',
    'Staticproperty',
    'Methodcall',
    'Staticmethodcall',
    'Staticconstant',
    'Logical',
    'Heredoc',
    'Not',
    '_Instanceof',
    '_New',
    'Arguments',
    'Functioncall',
    'Noscream',
    'Concatenation',
    'Multiplication',
    'Addition', 
    'Assignation',
    'Comparison',
    'Ternary',
    'Constant',
    'Magicconstant',
    'Parenthesis',
    '_Return',
    'Sequence',
    'Block',
    'Ifthen',
    'Phpcode',
);

$client = new Client();

$regex = array();
foreach($classes as $class) {
    $new = "Tokenizer\\$class";
    $regex[$class] = new $new($client);
}

$total = Tokenizer\Token::countTotalToken();
$prev = Tokenizer\Token::countLeftToken() + 1;
$count = $prev - 1; 
$prevprev = $prev - 1;
$round = 0;

while($prev > $count || $prevprev > $prev) { 
//    print "$count $prev $prevprev\n";
    $round++;
    
    $prevprev = $prev;
    $prev = $count; 

    $r = array_pop($regex);
    $r->resetReserve();
    array_push($regex, $r);
    foreach($regex as $r) {
        $r->check();
        
        $r->reserve();
    }
    unset($precedence);

    if ($count = Token::countLeftToken()) {
        display( "$round) Remains $count of $total tokens to process! \n");
    } else {
        display( "$round) All $total tokens have been processed! \n");
        $prev = $count = 0;
    }
}

Token::cleanHidden();
$end_time = microtime(true);
display("Total time : ".number_format(($end_time - $begin_time) * 1000, 2, '.', ' ')."ms\n");
// @todo display checks processed

function array_flatten($array, $level = 1) {
    $r = array();
    
    foreach($array as $a) {
        if ($level > 1 && is_array($a)) {
            $a = array_flatten($a, $level - 1);
        }
        $r = array_merge($r, $a);
    }
    
    return $r;
}

function display($message) {
    if (VERBOSE) {
        print $message;
    }
    // @todo put in log too ? 
}
?>