#!/usr/bin/env php
<?php
use Everyman\Neo4j\Client,
	Everyman\Neo4j\Index\NodeIndex,
	Everyman\Neo4j\Relationship,
	Everyman\Neo4j\Node,
	Everyman\Neo4j\Gremlin,
	Tokenizer\Token;

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$client = new Client();

$args = $argv;
if ($id = array_search('-json', $args)) {
    define('FORMAT', 'JSON');
} elseif ($id = array_search('-text', $args)) {
    define('FORMAT', 'TEXT');
} elseif ($id = array_search('-table', $args)) {
    define('FORMAT', 'TABLE');
} else {
    define('FORMAT', 'TEXT');
}

define('OUTPUT', false);

$stats = array();
$stats['files with next'] = queryColumn("g.idx('racines')[['token':'ROOT']].out('INDEXED').out('NEXT').in.loop(1){true}{ it.object.token == 'T_FILENAME'}.code");
$stats['Function with next'] = queryColumn("g.idx('atoms')[['atom':'_Function']].out('INDEXED').out('NEXT').transform{it.in.loop(1){true}{ it.object.token == 'T_FILENAME'}.next().code + ' ' + it.line }");
$stats['Switch'] = queryColumn("g.idx('atoms')[['atom':'_Switch']].out('INDEXED').filter{it.out('NEXT').any()}.transform{it.in.loop(1){true}{ it.object.token == 'T_FILENAME'}.next().code + ' ' + it.line }");
$stats['Addition'] = queryColumn("g.idx('atoms')[['atom':'Addition']].out('INDEXED').transform{it.in.loop(1){true}{ it.object.token == 'T_FILENAME'}.next().code + ' ' + it.line }");
$stats['New'] = queryColumn("g.idx('atoms')[['atom':'_New']].out('INDEXED').transform{it.in.loop(1){true}{ it.object.token == 'T_FILENAME'}.next().code + ' ' + it.line }");
$stats['Property'] = queryColumn("g.idx('atoms')[['atom':'Property']].out('INDEXED').transform{it.in.loop(1){true}{ it.object.token == 'T_FILENAME'}.next().code + ' ' + it.line }");
$stats['Not'] = queryColumn("g.idx('atoms')[['atom':'Not']].out('INDEXED').transform{it.in.loop(1){true}{ it.object.token == 'T_FILENAME'}.next().code + ' ' + it.line }");
$stats['Keyvalue'] = queryColumn("g.idx('atoms')[['atom':'Keyvalue']].out('INDEXED').transform{it.in.loop(1){true}{ it.object.token == 'T_FILENAME'}.next().code + ' ' + it.line }");
$stats['Ternary'] = queryColumn("g.idx('atoms')[['atom':'Ternary']].out('INDEXED').transform{it.in.loop(1){true}{ it.object.token == 'T_FILENAME'}.next().code + ' ' + it.line }");
$stats['String'] = queryColumn("g.idx('atoms')[['atom':'String']].out('INDEXED').transform{it.in.loop(1){true}{ it.object.token == 'T_FILENAME'}.next().code + ' ' + it.line }");
$stats['Arguments'] = queryColumn("g.idx('atoms')[['atom':'Arguments']].out('INDEXED').transform{it.in.loop(1){true}{ it.object.token == 'T_FILENAME'}.next().code + ' ' + it.line }");
$stats['PPP'] = queryColumn("g.idx('atoms')[['atom':'_Ppp']].out('INDEXED').transform{it.in.loop(1){true}{ it.object.token == 'T_FILENAME'}.next().code + ' ' + it.line }");
$stats['no_fullcode'] = queryColumn("g.V.has('fullcode', null).except([g.v(0)]).hasNot('index', 'true').filter{!(it.token in ['INDEX', 'T_ROOT', 'T_END', 'E_CLASS', 'E_FUNCTION', 'E_NAMESPACE'])}.transform{it.in.loop(1){true}{ it.object.token == 'T_FILENAME'}.next().code + ' ' + it.line }");

//$stats['test'] = queryOne("m = []; g.V.fill(m); m.size();");
//print_r($stats);

function queryOne($query) {
    $r = query($query);
    return $r[0][0];
}

function queryArray($query) {
    $return = array();
    
    $result = query($query);
    foreach($result as $r) {
        $return[] = (array) $r[0];
    }
	
	return $return;
}

function queryColumn($query) {
    $return = array();
    
    $result = query($query);
    foreach($result as $r) {
        $return[] = $r[0];
    }
	
	return $return;
}

function query($querystring) {
    global $client;
    $params = array('type' => 'IN');
    try {
        $query = new Gremlin\Query($client, $querystring, $params);
        return $query->getResultSet();
    } catch (Exception $e) {
        print "'$querystring' failed\n";
        return array();
//        die();
    }
}

if (FORMAT == 'JSON') {
    $output = json_encode($stats);
} elseif (FORMAT == 'TABLE') {
    $output = table_encode($stats);
} else {
    $output = text_encode($stats);
}

function table_encode($stats) {
    $html = "<html><body>";
    
    foreach($stats as $name => $value) {
        $html .= "<tr><td>$name</td><td>$value</td></tr>\n";
    }
    
    $html .= "</body></html>";
    return $html;
}

function text_encode($stats) {
    global $file;
    if ($file) {
        $html = "Statistics for the file '$file'\n\n";
    } else {
        $html = "Statistics for the whole server\n\n";
    }
    
    foreach($stats as $name => $value) {
        if (is_array($value)) {
            $html .= "$name : ".join(" \n".str_repeat(' ', strlen("$name : ")), $value)."\n";
        } else {
            $html .= "$name : $value\n";
        }
    }
    
    $html .= "\n";
    return $html;
}

if (OUTPUT) {
    $fp = fopen(FILE, 'w+');
    fwrite($fp, $output);
    fclose($fp);
} else {
    print $output;
}

?>