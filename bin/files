<?php

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$config = Config::factory();

$dir = $config->project;

$stats = array();
$unknown = array();

if ($config->project === null) {
    die("Usage : files -p project\nAborting");
} elseif (!file_exists('./projects/'.$dir.'/code/')) {
    die("No such project as '$dir'\nAborting");
} 

$exts = array('php'      => array('php', 'php3', 'inc', 'tpl', 'phtml', 'tmpl', 'phps', 'ctp'  ),
              'images'   => array('jpg', 'gif', 'ico', 'png', 'svg', 'eps', 'psd', 'dot', 'dhp', 'JPG',),
              'media'    => array('ttf', 'swf', 'woff', 'eot', 'otf', ),
              'text'     => array('xml', 'txt', 'rst', 'md', 'markdown', 'po', 'mo', 'pot', 'dtd', 'TXT', 
                                  'WEBHELP', 'mxml', 'mime', 'latte', 'MIT', 'python', 'text'),
              'config'   => array('neon', 'ini', 'yml', 'yaml') ,
              'web'      => array('html', 'htm', 'css', 'js', 'json', 'less', 'webloc', 'wsdl',  ),
              'document' => array('doc', 'xls', 'docx', 'pdf', 'odt', 'epub', 'book', 'xlsx', 'ods', 'slk' ),
              'archives' => array('tgz', 'bz2' ,'z', 'zip', 'gz', 'tar', 'bz', 'tbz', ),
              'audio'    => array('mp3', 'fla', 'wav', 'xap', 'ses'),
              'video'    => array('avi', 'pxm') ,
              'data'     => array('sql', 'properties', 'yml', 'dist', 'csv', 'log', 'profile', 'info', 'module','install', 
                                  'sqlite', 'lang', 'conf', 'config', 'db', 'phar', 'db3', 'neon', 'data', 'ast'),
              'prog'     => array('py', 'bat', 'c', 'h', 'twig', 'sh', 'jar', 'java', 'rb', 'phpt', 'sass', 'scss', 
                                  'xsl', 'as', 'cmd','m4', 'dsp', 'sln', 'vcproj', 'w32', 'diff', 'pl', 'dsw', 'am', 'in', 'ac', ),
              'misc'     => array('test', 'table', 'dat', 'admin', 'cur', 'git', 'rng', 'bin',  'ser', 'mgc',),
              'security' => array('pub', 'pem', 'crt', 'xcf', ),
             );

$ignoreDirs = array();
foreach($config->ignore_dirs as $ignore) {
    if ($ignore[0] == '/') {
        $d = './projects/'.$dir.'/code'.$ignore;
        if (!file_exists($d)) { 
            continue; 
        }
        if (substr($ignore, -1) === '/') {
            // This is a folder
            $d .= '*';
        } // else Files are left as is
        $ignoreDirs[] = $d;
    } else {
        $ignoreDirs[] = '*'.$ignore.'*';
    }
}

$datastore = new Datastore($dir);

$shellBase = 'find ./projects/'.$dir.'/code \\( -name "*.'.(join('" -o -name "*.', $exts['php'])).'" \\) \\( -not -path "'.(join('" -and -not -path "', $ignoreDirs )).'" \\) ! -type l ';

$files = trim(shell_exec($shellBase));
$files = preg_replace('#/projects/.*?/code#is', '', $files);
$files = explode("\n", $files);
$files = array_map(function ($a) { return array('file' => $a); }, $files);

$datastore->cleanTable('files');
$datastore->addRow('files', $files);

$ignoreDirs = array();
$ignoreName = array();
foreach($config->ignore_dirs as $ignore) {
    if ($ignore[0] == '/') {
        $d = './projects/'.$dir.'/code'.$ignore.'';
        if (file_exists($d)) { 
            $ignoreDirs[] = substr($ignore, 1);
        }
    } else {
        $ignoreName[] = $ignore;
    }
}

$shell = 'cd ./projects/'.$dir.'/code/; phploc '.(count($ignoreName) ? ' --names-exclude  '.join(' --names-exclude ', $ignoreName).' ' : '')
                                                .(count($ignoreDirs) ? ' --exclude '.join(' --exclude ', $ignoreDirs).' ' : '')
                                                .' .';

$res = shell_exec($shell);
preg_match('/Lines of Code \(LOC\)\s*(\d+)/is', $res, $r);
$stats['loc'] = $r[1];

$notCompilable = array();

$versions = $config->other_php_versions;

//if (!empty($versions)) {
foreach($versions as $version) {
    $stats['notCompilable'.$version] = -1;
    $shell = $shellBase . ' | sed -e \'s/^/"/g\' -e \'s/$/"/g\' | tr \'\n\' \' \'|  xargs -n1 -P5 sh scripts/php'.$version.'lint.sh';
    $res = trim(shell_exec($shell));
    $resFiles = explode("\n", $res);
    $incompilables = array();
    
    foreach($resFiles as $resFile) {
        if (substr($resFile, 0, 28) == 'No syntax errors detected in') {
            // do nothing. All is fine.
        } elseif ($resFile == '') {
            // do nothing. All is fine.
        } elseif (substr($resFile, 0, 13) == 'Parse error: ') {
            preg_match('#Parse error: (.+?) in (.+?) on line (\d+)#', $resFile, $r);
            $incompilables[] = array('error' => $r[1], 'file' => str_replace('./projects/'.$dir.'/code/', '', $r[2]), 'line' => $r[3]);
        } elseif (substr($resFile, 0, 17) == 'PHP Parse error: ') {
            preg_match('#PHP Parse error: (.+?) in (.+?) on line (\d+)#', $resFile, $r);
            $incompilables[] = array('error' => $r[1], 'file' => str_replace('./projects/'.$dir.'/code/', '', $r[2]), 'line' => $r[3]);
        } elseif (substr($resFile, 0, 14) == 'PHP Warning:  ') {
            preg_match('#PHP Warning:  (.+?) in (.+?) on line (\d+)#', $resFile, $r);
            $incompilables[] = array('error' => $r[1], 'file' => str_replace('./projects/'.$dir.'/code/', '', $r[2]), 'line' => $r[3]);
        } elseif (substr($resFile, 0, 18) == 'PHP Fatal error:  ') {
            preg_match('#PHP Fatal error:  (.+?) in (.+?) on line (\d+)#', $resFile, $r);
            $incompilables[] = array('error' => $r[1], 'file' => str_replace('./projects/'.$dir.'/code/', '', $r[2]), 'line' => $r[3]);
        } elseif (substr($resFile, 0, 23) == 'PHP Strict Standards:  ') {
            preg_match('#PHP Strict Standards:  (.+?) in (.+?) on line (\d+)#', $resFile, $r);
            $incompilables[] = array('error' => $r[1], 'file' => str_replace('./projects/'.$dir.'/code/', '', $r[2]), 'line' => $r[3]);
        } elseif (substr($resFile, 0, 23) == 'PHP Strict standards:  ') {
            preg_match('#PHP Strict standards:  (.+?) in (.+?) on line (\d+)#', $resFile, $r);
            $incompilables[] = array('error' => $r[1], 'file' => str_replace('./projects/'.$dir.'/code/', '', $r[2]), 'line' => $r[3]);
        } elseif (substr($resFile, 0, 18) == 'Strict Standards: ') {
            preg_match('#Strict Standards: (.+?) in (.+?) on line (\d+)#', $resFile, $r);
            $incompilables[] = array('error' => $r[1], 'file' => str_replace('./projects/'.$dir.'/code/', '', $r[2]), 'line' => $r[3]);
        } elseif (substr($resFile, 0, 18) == 'Strict standards: ') {
            preg_match('#Strict standards: (.+?) in (.+?) on line (\d+)#', $resFile, $r);
            $incompilables[] = array('error' => $r[1], 'file' => str_replace('./projects/'.$dir.'/code/', '', $r[2]), 'line' => $r[3]);
        } elseif (substr($resFile, 0, 17) == 'PHP Deprecated:  ') {
            preg_match('#PHP Deprecated:  (.+?) in (.+?) on line (\d+)#', $resFile, $r);
            $incompilables[] = array('error' => $r[1], 'file' => str_replace('./projects/'.$dir.'/code/', '', $r[2]), 'line' => $r[3]);
        } elseif (substr($resFile, 0, 12) == 'Deprecated: ') {
            preg_match('#Deprecated: (.+?) in (.+?) on line (\d+)#', $resFile, $r);
            $incompilables[] = array('error' => $r[1], 'file' => str_replace('./projects/'.$dir.'/code/', '', $r[2]), 'line' => $r[3]);
        } elseif (substr($resFile, 0, 13) == 'Fatal error: ') {
            preg_match('#Fatal error: (.+?) in (.+?) on line (\d+)#', $resFile, $r);
            $incompilables[] = array('error' => $r[1], 'file' => str_replace('./projects/'.$dir.'/code/', '', $r[2]), 'line' => $r[3]);
        } elseif (substr($resFile, 0, 9) == 'Warning: ') {
            preg_match('#Warning: (.+?) in (.+?) on line (\d+)#', $resFile, $r);
            $incompilables[] = array('error' => $r[1], 'file' => str_replace('./projects/'.$dir.'/code/', '', $r[2]), 'line' => $r[3]);
        } elseif (substr($resFile, 0, 14) == 'Errors parsing') {
            // ignore
        } else {
            print "\nCouldn't interpret on syntax error : \n";
            var_dump($resFile);
            print_r($res);
            die("\n".__FILE__."\n");
        }
    }
    
    $datastore->cleanTable('compilation'.$version.'');
    $datastore->addRow('compilation'.$version.'', $incompilables);
    $stats['notCompilable'.$version] = count($incompilables);
}

$stats['php'] = count($resFiles);
$shell = $shellBase . ' | sed -e \'s/^/"/g\' -e \'s/$/"/g\' | tr \'\n\' \' \'|  xargs -n1 -P5 sh scripts/php56tokens.sh'; // | awk \'{s+=$1} END {print s}\'
$resultNosot = shell_exec($shell);
$stats['tokens'] = (int) array_sum(explode("\n", $resultNosot));

$shell = $shellBase . ' | sed -e \'s/^/"/g\' -e \'s/$/"/g\' | tr \'\n\' \' \'|  xargs -n1 -P5 sh scripts/phpsot.sh '; //| awk \'{s+=$1} END {print s}\'
$resultSot = shell_exec($shell);
$stats['tokenssot'] = (int) array_sum(explode("\n", $resultSot));

$datastore->cleanTable('shortopentag');
if ($stats['tokenssot'] != $stats['tokens']) {
    $nosot = explode("\n", trim($resultNosot));
    $sot = explode("\n", trim($resultSot));
    
    if (count($nosot) != count($sot)) { 
        die("Error in short open tag analyze\n");
    }
    $shortOpenTag = array();
    foreach($nosot as $id => $count) {
        list($countNosot, $file) = explode(' ', $sot[$id]);
        
        if ($countNosot != $count) {
            $shortOpenTag[] = array('file' => $file);
        }
    }
    
    $datastore->addRow('shortopentag', $shortOpenTag);
}

$db = new Db();
$db->insert('projects', array('notCompilable53', 'notCompilable54', 'notCompilable55', 'notCompilable56', 'project', 'php', 'tokens', 'loc'), array($stats['notCompilable53'], $stats['notCompilable54'], $stats['notCompilable55'], $stats['notCompilable56'], $dir, $stats['php'], $stats['tokens'], $stats['loc']));

if ($config->json) {
    if ($unknown) {
        $stats['unknown'] = $unknown;
    }
    print json_encode($stats);
} else {
    print_r($stats);
    if ($unknown) {
        print_r($unknown);
    }
}

?>