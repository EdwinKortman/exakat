<?php

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$args = $argv;

$dir = $args[1];
if ($dir == "-P") {
    $projects = glob('projects/*');
    foreach($projects as $project) {
        if (!is_dir($project)) { continue; }

        $p = basename($project);
        print "$p\n";
        if ($p == 'test') { continue; }
        if ($p == 'default') { continue; }
        shell_exec('php bin/files '.$p);
    }
    die();
}

if (in_array('-json', $args)) {
    define('OUTPUT', 'JSON');
} else {
    define('OUTPUT', 'PRINT_R');
}

$stats = array();
$unknown = array();

if (strpos($dir, '/') === false) {
    // trying as a project name
    if (file_exists('./projects/'.$dir.'/code/')) {
        $files = glob_recursive('./projects/'.$dir.'/code/');
    }

    $res = shell_exec('phploc ./projects/'.$dir.'/code/');
    preg_match('/Lines of Code \(LOC\)\s*(\d+)/is', $res, $r);
    $stats['loc'] = $r[1];
}

if (!isset($files)) {
    if (!file_exists($dir)) {
        print "No such dir as '$dir'. Aborting\n";
        die();
    }
    $files = glob_recursive($dir."/");

    $res = shell_exec('phploc '.$dir);
    preg_match('/Lines of Code \(LOC\)\s*(\d+)/is', $res, $r);
    $stats['loc'] = $r[1];
}

$exts = array('php' => array('php', 'php3', 'inc', 'tpl', 'phtml', 'tmpl', 'phps',  ),
              'images' => array('jpg', 'gif', 'ico', 'png', 'svg', 'eps', 'psd', 'dot', 'dhp'),
              'media' => array('ttf', 'swf', 'woff', 'eot', 'otf', ),
              'text' => array('xml', 'txt', 'rst', 'md', 'markdown', 'po', 'mo', 'pot', 'dtd', 'TXT', 'WEBHELP', 'mxml', 'mime', 'latte', 'MIT', 'python', 'text'),
              'config' => array('neon', 'ini', 'yml', 'yaml') ,
              'web' => array('html', 'htm', 'css', 'js', 'json', 'less', 'webloc', 'wsdl',  ),
              'document' => array('doc', 'xls', 'docx', 'pdf', 'odt', 'epub', 'book', 'xlsx', 'ods', 'slk' ),
              'archives' => array('tgz', 'bz2' ,'z', 'zip', 'gz', 'tar', 'bz', 'tbz', ),
              'audio' => array('mp3', 'fla', 'wav', 'xap', 'ses'),
              'data' => array('sql', 'properties', 'yml', 'dist', 'csv', 'log', 'profile', 'info', 'module','install', 'sqlite', 'lang', 'conf', 'config', 'db', 'phar', 'db3', 'neon', 'data'),
              'prog' => array('py', 'bat', 'c', 'h', 'twig', 'sh', 'jar', 'java', 'rb', 'phpt', 'sass', 'scss', 'xsl', 'as', 'cmd','m4', 'dsp', 'sln', 'vcproj', 'w32',),
              'misc' => array('test', 'table', 'dat', 'admin', 'cur', 'git', 'rng', 'bin',  'ser', 'mgc',),
              'security' => array('pub', 'pem', 'crt', 'xcf', ),
             );
             

$not_compilable = array();
foreach($files as $file) { 
    if (is_dir($file)) { 
        @$stats['dir']++;
        continue; 
    }

    if (strpos(basename($file), '.') === false) {
        @$stats['none']++;
    } else {
        $found = false;
        foreach($exts as $e => $ext) {
            if (preg_match('#\.('.join('|', $ext).')$#', $file)) {
                @$stats[$e]++;
                $found = true;

                if ($e == 'php') {
                    $res = shell_exec('php -l '.$file.' 2>&1' );
                    if (substr($res, 0, 25) != 'No syntax errors detected') {
                        @$stats['not compilable']++;
                        $not_compilable[] = $file;
                    } else {
                        @$stats['tokens'] += count(token_get_all(file_get_contents($file)));
                    }
                }
                break 1;
            }
        }

        if (!$found) {  
            @$stats['unknown']++; 
            $unknown[] = basename($file);
        }
    }
}

if (count($not_compilable) != 0) {
    file_put_contents('log/not_compilable.log', join("\n", $not_compilable));
}

$db = new Db();
$db->insert('projects', array('notCompilable', 'project', 'php', 'tokens', 'loc'), array(count($not_compilable), $dir, $stats['php'], $stats['tokens'], $stats['loc']));

if (OUTPUT == 'JSON') {
    if ($unknown) {
        $stats['unknown'] = $unknown;
    }
    print json_encode($stats);
} else {
    print_r($stats);
    if ($unknown) {
        print_r($unknown);
    }
}

function glob_recursive($dir, $prefix = '') {
  $dir = rtrim($dir, '\\/');
  $result = array();

    foreach (glob("$dir/*", GLOB_MARK) as $f) {
      if (substr($f, -1) === '/') {
        $result = array_merge($result, glob_recursive($f, $prefix.basename($f).'/'));
      } else {
        $result[] = $f;
      }
    }

  return $result;
}
?>