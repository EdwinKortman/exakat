#!/usr/bin/env php
<?php
/*
 * Copyright 2012-2015 Damien Seguy â€“ Exakat Ltd <contact(at)exakat.io>
 * This file is part of Exakat.
 *
 * Exakat is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Exakat is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Exakat.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <http://exakat.io/>.
 *
*/

use Everyman\Neo4j\Client,
	Everyman\Neo4j\Index\NodeIndex,
	Everyman\Neo4j\Relationship,
	Everyman\Neo4j\Node,
	Everyman\Neo4j\Gremlin,
	Tokenizer\Token,
	Michelf\Markdown,
	Analyzer\Analyzer;

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$client = new Client();

// network with tokens
    $queryTemplate = "g.V.hasNot('atom', null).filter{!(it.token in ['T_INDEX', 'T_FILENAME'])}.sideEffect{ tin = it.token; }.out.transform{ tin + ' -> ' + it.token }.unique()"; 
    $vertices = query($client, $queryTemplate);
    
    $body = '';
    $headers = '';
    
    $tokens = array();
    $links = array();
    
    foreach($vertices as $v) {
        list($a, $b) = explode(' -> ', $v[0]);
        if (!isset($tokens[$a])) {
            $tokens[$a] = count($tokens);
            $ida = $tokens[$a];
            $headers .= "$ida [label = \"$a\"];\n";
        }
        if (!isset($tokens[$b])) {
            $tokens[$b] = count($tokens);
            $idb = $tokens[$b];
            $headers .= "$idb [label = \"$b\"];\n";
        }
        
        @$links[$b]['in']++;
        @$links[$b]['out']+= 0;
        @$links[$a]['out']++;
        @$links[$a]['in']+= 0;
        
        $ida = $tokens[$a];
        $idb = $tokens[$b];
        
        $body .= "$ida -> $idb;\n";
    }
    $digraph = " digraph graphname {\n";
    $digraph .= "$headers\n";
    $digraph .= "$body\n";
    $digraph .= "}\n";
    
    print count($vertices)." found\n";
    
    file_put_contents('log/network.dot', $digraph);
    
    $csv = "Tokens\tIn\tOut\tRation\n";
    foreach($links as $token => $row) {
        $csv .= "$token\t{$row['in']}\t{$row['out']}\t".($row['out'] == 0 ? 0 : number_format($row['in'] / $row['out'] * 100, 0))."\n";
    }
    file_put_contents('log/network.csv', $csv);
    
// network with atoms
    $queryTemplate = "g.V.hasNot('atom', null).filter{!(it.token in ['T_INDEX', 'T_FILENAME'])}.sideEffect{ tin = it.atom; }.out.transform{ tin + ' -> ' + it.atom }.unique()"; 
    $vertices = query($client, $queryTemplate);
    
    $body = '';
    $headers = '';
    
    $tokens = array();
    $links = array();
    
    foreach($vertices as $v) {
        list($a, $b) = explode(' -> ', $v[0]);
        if (!isset($tokens[$a])) {
            $tokens[$a] = count($tokens);
            $ida = $tokens[$a];
            $headers .= "$ida [label = \"$a\"];\n";
        }
        if (!isset($tokens[$b])) {
            $tokens[$b] = count($tokens);
            $idb = $tokens[$b];
            $headers .= "$idb [label = \"$b\"];\n";
        }
        
        @$links[$b]['in']++;
        @$links[$b]['out']+= 0;
        @$links[$a]['out']++;
        @$links[$a]['in']+= 0;
        
        $ida = $tokens[$a];
        $idb = $tokens[$b];
        
        $body .= "$ida -> $idb;\n";
    }
    $digraph = " digraph graphname {\n";
    $digraph .= "$headers\n";
    $digraph .= "$body\n";
    $digraph .= "}\n";
    
    print count($vertices)." found\n";
    
    file_put_contents('log/network.atom.dot', $digraph);
    
    $csv = "Tokens\tIn\tOut\tRation\n";
    foreach($links as $token => $row) {
        $csv .= "$token\t{$row['in']}\t{$row['out']}\t".($row['out'] == 0 ? 0 : number_format($row['in'] / $row['out'] * 100, 0))."\n";
    }
    file_put_contents('log/network.atom.csv', $csv);



function query($client, $query) {
    $queryTemplate = $query;
    $params = array('type' => 'IN');
    try {
        $query = new \Everyman\Neo4j\Gremlin\Query($client, $queryTemplate, $params);
        return $query->getResultSet();
    } catch (\Exception $e) {
        $message = $e->getMessage();
        $message = preg_replace('#^.*\[message\](.*?)\[exception\].*#is', '\1', $message);
        print "Exception : ".$message."\n";
        
        print $queryTemplate."\n";
        die();
    }
    return $query->getResultSet();
}


?>