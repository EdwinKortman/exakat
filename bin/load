#!/usr/bin/env php
<?php
use Everyman\Neo4j\Client,
	Everyman\Neo4j\Index\NodeIndex,
	Everyman\Neo4j\Relationship,
	Everyman\Neo4j\Node,
	Everyman\Neo4j\Gremlin;

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$args = $argv;

if ($id = array_search('-v', $args)) {
    define('VERBOSE', true);
} else {
    define('VERBOSE', false);
}

if ($id = array_search('-r', $args)) {
    define('RECURSIVE', true);
} else {
    define('RECURSIVE', false);
}

define('NEO_VERSION', true);

if ($id = array_search('-f', $args)) {
    $filename = $args[$id + 1];
    
    process_file($filename);
} elseif ($id = array_search('-d', $args)) {
    $dir = $args[$id + 1];
    
    if ($dir{strlen($dir) - 1} == '/') {
        $dir = substr($dir, 0, -1);
    }
    
    process_dir($dir);
} else {
    print "No file to process. Aborting\n";
    die();
}

function process_dir($dir) {

    $dirr = opendir($dir);
    while ($filename = readdir($dirr)) {
        if ($filename{0} == '.') { continue; }
        
        if (is_dir($dir.'/'.$filename)) {
            if (RECURSIVE) {
                process_dir($dir.'/'.$filename);
            }
        } else {
            if (substr($filename, -4) != '.php') { continue; }
            print $dir.'/'.$filename."\n";
            process_file($dir.'/'.$filename);
        }
    }
}

function process_file($filename) {
    
    if (!file_exists($filename)) {
        print "'$filename' doesn't exists. Aborting\n";
        die();
    }
    
    $php = file_get_contents($filename);
    $file = realpath($filename);
    $tokens = token_get_all($php);
    
    $client = new Client();

    // @doc delete old tokens
    $queryTemplate = "g.V.has('file', '$file').outE.each{ g.removeEdge(it); }";
    $params = array('type' => 'IN');
    $query = new Gremlin\Query($client, $queryTemplate, $params);
    $query->getResultSet();
    
    $queryTemplate = "g.V.has('file', '$file').each{ g.removeVertex(it); }";
    $params = array('type' => 'IN');
    $query = new Gremlin\Query($client, $queryTemplate, $params);
    $edges = $query->getResultSet();

    $racines = new NodeIndex($client, 'racines');
    $regex = Tokenizer\Token::$types; 
    $regexIndex = array();
    foreach($regex as $r) {
        $regexIndex[$r] = $client->makeNode()->setProperty('token', $r)
                                             ->setProperty('code', 'Index for '.$r)
                                             ->setProperty('file', $filename)
                                             ->setProperty('index', 'yes')
                                             ->save();
        $racines->add($regexIndex[$r], 'token', $r);
    }
    
    // load new tokens
    $line = 0;
    $TPHP = array(";" => 'T_SEMICOLON',
                  "=" => 'T_EQUAL',
                  "+" => 'T_PLUS',
                  "-" => 'T_MINUS',
                  "*" => 'T_STAR',
                  "/" => 'T_SLASH',
                  "%" => 'T_PERCENTAGE',
                  "(" => 'T_OPEN_PARENTHESIS',
                  ")" => 'T_CLOSE_PARENTHESIS',
                  "!" => 'T_BANG',
                  "[" => 'T_OPEN_BRACKET',
                  "]" => 'T_CLOSE_BRACKET',
                  "{" => 'T_OPEN_CURLY',
                  "}" => 'T_CLOSE_CURLY',
                  '.' => 'T_DOT',
                  ',' => 'T_COMMA',
                  '@' => 'T_AT',
                  '?' => 'T_QUESTION',
                  ':' => 'T_COLON',
                  '>' => 'T_GREATER',
                  '<' => 'T_SMALLER',
                  '&' => 'T_AND',
                  '^' => 'T_OR',
                  '|' => 'T_XOR',
                  '&&' => 'T_ANDAND',
                  '||' => 'T_OROR',
                  '"' => 'T_QUOTE',
                  '$' => 'T_DOLLAR',
                  );
    
    $atoms = array( 'T_STRING'                   => 'String', 
                    'T_CONSTANT_ENCAPSED_STRING' => 'String', 
                    'T_CONSTANT_ENCAPSED_STRING' => 'String', 
                    'T_ENCAPSED_AND_WHITESPACE'  => 'String',
                    'T_INLINE_HTML'              => 'String',
                    'T_VARIABLE'                 => 'Variable',
                    'T_STRING_VARNAME'           => 'Variable',
                    'T_LNUMBER'                  => 'Integer', 
                    'T_NUM_STRING'               => 'Integer',
                    'T_DNUMBER'                  => 'Float', 
                    'T_CLASS_C'                  => 'Magicconstant', 
                    'T_FUNC_C'                   => 'Magicconstant', 
                    'T_DIR'                      => 'Magicconstant', 
                    'T_FILE'                     => 'Magicconstant', 
                    'T_LINE'                     => 'Magicconstant', 
                    'T_METHOD_C'                 => 'Magicconstant', 
                    'T_NS_C'                     => 'Magicconstant', 
                    );
            
    
    foreach($tokens as $id => $token) {
        if ($token[0] == T_WHITESPACE)  { unset($tokens[$id]); }
        if ($token[0] == T_COMMENT)     { unset($tokens[$id]); }
        if ($token[0] == T_DOC_COMMENT) { unset($tokens[$id]); }
    }
    $tokens = array_values($tokens);
    
    $nb = count($tokens);
    $Tid = -1;
    for($id = 0; $id < $nb; $id++) {
        if (empty($tokens[$id])) { continue; }
        $Tid++;
        $token = $tokens[$id];

        if (is_array($token)) {
            $T[$Tid] = $client->makeNode()->setProperty('token', token_name($token[0]))
                                         ->setProperty('code', $token[1])
                                         ->setProperty('line', $token[2])
                                         ->setProperty('file', $file);
            if (in_array($token[0], array(T_OPEN_TAG, T_IS_EQUAL, T_ECHO, T_DOUBLE_ARROW, T_CASE, T_DEFAULT,
                                          T_AND_EQUAL, T_CONCAT_EQUAL, T_DIV_EQUAL, T_MINUS_EQUAL, T_MOD_EQUAL,
                                          T_MUL_EQUAL, T_OR_EQUAL, T_PLUS_EQUAL, T_SL_EQUAL, T_SR_EQUAL, T_XOR_EQUAL
                                          ))) {
                $T[$Tid]->setProperty('begin', true);
            }
            
            if (isset($atoms[token_name($token[0])])) {
                $T[$Tid]->setProperty('atom', $atoms[token_name($token[0])]);
            }
            
            $token_value = token_name($token[0]);
            $T[$Tid]->save();
            $line = $token[2];
        } else {
            if (!isset($TPHP[$token])) {
                print("No TPHP for '{$token}'\n");
                $TPHP[$token] = max($TPHP) + 1;
            }
            
            if ($token == '{' && $tokens[$id + 1] == '}') {
                $T[$Tid] = $client->makeNode()->setProperty('token', $TPHP[$token])
                                             ->setProperty('code', $token)
                                             ->setProperty('line', $line)
                                             ->setProperty('file', $file)
                                             ->setProperty('atom', 'Block')->save();

                $void   = $client->makeNode()->setProperty('token', 'T_VOID')
                                             ->setProperty('code', 'void')
                                             ->setProperty('line', $line)
                                             ->setProperty('file', $file)
                                             ->setProperty('atom', 'Void')->save();

                $T[$Tid]->relateTo($void, 'CODE')->save();
                unset($tokens[$id + 1]);
            } else {
                $T[$Tid] = $client->makeNode()->setProperty('token', $TPHP[$token])
                                             ->setProperty('code', $token)
                                             ->setProperty('line', $line)
                                             ->setProperty('file', $file)->save();
            }
    
            if (in_array($token, array('(','{','+','-','*','/','%', '==', ',', '=', '.'))) {
                $T[$Tid]->setProperty('begin', true)->save();
            }

            $token_value = $TPHP[$token];
            $T[$Tid]->save();
        }

            $regex = Tokenizer\Token::$types; 
            foreach($regex as $r) {
                $class = "Tokenizer\\$r";
                if (in_array($token_value, $class::$operators)) { 
                    $regexIndex[$r]->relateTo($T[$Tid], 'INDEXED')->save();
                }
            }
        
        if (!isset($previous)) {
            $previous = $T[$Tid];
        } else {
            $previous->relateTo($T[$Tid], 'NEXT')->save();
            $previous = $T[$Tid];
        }
    }
    
    $T[0]->setProperty('root', 'true')->save();
    
    $T[-1] = $client->makeNode()->setProperty('token', 'T_ROOT')
                                ->setProperty('code', '/**/')
                                ->setProperty('line', 0)
                                ->setProperty('file', $file)
                                ->setProperty('hidden', true)
                                ->save();
    
    $last     = $client->makeNode()->setProperty('token', 'T_END')
                                   ->setProperty('code', '/**/')
                                   ->setProperty('line', $line)
                                   ->setProperty('file', $file)
                                   ->setProperty('hidden', true)
                                   ->save();
                                   
    $T[-1]->relateTo($T[0], 'NEXT')->setProperty('__FILE__', true)->save();
    $previous->relateTo($last, 'NEXT')->setProperty('__FILE__', true)->save();
    
    $last2     = $client->makeNode()->setProperty('token', 'T_END')
                                    ->setProperty('code', '/* * */')
                                    ->setProperty('line', $line)
                                    ->setProperty('file', $file)
                                    ->setProperty('hidden', true)
                                    ->save();
    $last->relateTo($last2, 'NEXT')->setProperty('__FILE__', true)->save();
}
?>