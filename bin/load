#!/usr/bin/env php
<?php
use Everyman\Neo4j\Client,
	Everyman\Neo4j\Index\NodeIndex,
	Everyman\Neo4j\Relationship,
	Everyman\Neo4j\Node,
	Everyman\Neo4j\Gremlin;

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$args = $argv;
if ($id = array_search('-f', $args)) {
    $filename = $args[$id + 1];
    
} else {
    $filename = 'tests/test/Addition.03.php';
}

if (!file_exists($filename)) {
    print "'$filename' doesn't exists. Aborting\n";
    die();
}

if ($id = array_search('-v', $args)) {
    define('VERBOSE', true);
} else {
    define('VERBOSE', false);
}

$php = file_get_contents($filename);
$file = realpath($filename);
$tokens = token_get_all($php);

$client = new Client();

// @doc delete old tokens

$queryTemplate = "g.V.has('file', '$file').outE.each{ g.removeEdge(it); }";
$params = array('type' => 'IN');
$query = new Gremlin\Query($client, $queryTemplate, $params);
$query->getResultSet();

$queryTemplate = "g.V.has('file', '$file').each{ g.removeVertex(it); }";
$params = array('type' => 'IN');
$query = new Gremlin\Query($client, $queryTemplate, $params);
$edges = $query->getResultSet();

// load new tokens
$line = 0;
$TPHP = array(";" => 'T_SEMICOLON',
              "=" => 'T_EQUAL',
              "+" => 'T_PLUS',
              "-" => 'T_MINUS',
              "*" => 'T_STAR',
              "/" => 'T_SLASH',
              "%" => 'T_PERCENTAGE',
              "(" => 'T_OPEN_PARENTHESIS',
              ")" => 'T_CLOSE_PARENTHESIS',
              "!" => 'T_BANG',
              "[" => 'T_OPEN_BRACKET',
              "]" => 'T_CLOSE_BRACKET',
              "{" => 'T_OPEN_CURLY',
              "}" => 'T_CLOSE_CURLY',
              '.' => 'T_DOT',
              ',' => 'T_COMMA',
              '@' => 'T_AT',
              '?' => 'T_QUESTION',
              ':' => 'T_COLON',
              '>' => 'T_GREATER',
              '<' => 'T_LESSER',
              '&' => 'T_AND',
              '^' => 'T_OR',
              '|' => 'T_XOR',
              '&&' => 'T_ANDAND',
              '||' => 'T_OROR',
              '"' => 'T_QUOTE',
              '$' => 'T_DOLLAR',
              );

foreach($tokens as $id => $token) {
    if ($token[0] == T_WHITESPACE) { continue; }
    if ($token[0] == T_COMMENT) { continue; }
    if ($token[0] == T_DOC_COMMENT) { continue; }
    
    if (is_array($token)) {
        $T[$id] = $client->makeNode()->setProperty('token', token_name($token[0]))
                                     ->setProperty('code', $token[1])
                                     ->setProperty('line', $token[2])
                                     ->setProperty('file', $file);
        if (in_array($token[0], array(T_OPEN_TAG, T_IS_EQUAL, T_ECHO))) {
            $T[$id]->setProperty('begin', true)->save();
        }
                                     
        $T[$id]->save();
        $line = $token[2];
    } else {
        if (!isset($TPHP[$token])) {
            print("No TPHP for '{$token}'\n");
            $TPHP[$token] = max($TPHP) + 1;
        }
        $T[$id] = $client->makeNode()->setProperty('token', $TPHP[$token])
                                     ->setProperty('code', $token)
                                     ->setProperty('line', $line)
                                     ->setProperty('file', $file)->save();

        if (in_array($token, array('(','{','.','+','-','*','/','%', '=='))) {
            $T[$id]->setProperty('begin', true)->save();
        }
                                     
        $T[$id]->save();
    }
    
    if (!isset($previous)) {
        $previous = $T[$id];
    } else {
        $previous->relateTo($T[$id], 'NEXT')->save();
        $previous = $T[$id];
    }
}

$T[0]->setProperty('root', 'true')->save();

$T[-1] = $client->makeNode()->setProperty('token', 'T_ROOT')
                            ->setProperty('code', '/**/')
                            ->setProperty('line', 0)
                            ->setProperty('file', $file)
                            ->setProperty('hidden', true)
                            ->save();

$last     = $client->makeNode()->setProperty('token', 'T_END')
                               ->setProperty('code', '/**/')
                               ->setProperty('line', $line)
                               ->setProperty('file', $file)
                               ->setProperty('hidden', true)
                               ->save();
                               
$T[-1]->relateTo($T[0], 'NEXT')->setProperty('__FILE__', true)->save();
$previous->relateTo($last, 'NEXT')->setProperty('__FILE__', true)->save();

$last2     = $client->makeNode()->setProperty('token', 'T_END')
                                ->setProperty('code', '/* * */')
                                ->setProperty('line', $line)
                                ->setProperty('file', $file)
                                ->setProperty('hidden', true)
                                ->save();
$last->relateTo($last2, 'NEXT')->setProperty('__FILE__', true)->save();

?>