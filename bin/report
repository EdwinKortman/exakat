#!/usr/bin/env php
<?php
use Everyman\Neo4j\Client,
	Everyman\Neo4j\Index\NodeIndex,
	Everyman\Neo4j\Relationship,
	Everyman\Neo4j\Node,
	Everyman\Neo4j\Gremlin,
	Tokenizer\Token,
	Michelf\Markdown;

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$client = new Client();

$args = $argv;
if ($id = array_search('-json', $args)) {
    define('FORMAT', 'JSON');
    unset($args[$id]);
    $args = array_values($args);
} elseif ($id = array_search('-text', $args)) {
    define('FORMAT', 'TEXT');
    unset($args[$id]);
    $args = array_values($args);
} elseif ($id = array_search('-odt', $args)) {
    define('FORMAT', 'ODT');
    unset($args[$id]);
    $args = array_values($args);
} elseif ($id = array_search('-markdown', $args)) {
    define('FORMAT', 'MARKDOWN');
    unset($args[$id]);
    $args = array_values($args);
} elseif ($id = array_search('-csv', $args)) {
    define('FORMAT', 'CSV');
    unset($args[$id]);
    $args = array_values($args);
} elseif ($id = array_search('-html', $args)) {
    define('FORMAT', 'HTML');
    unset($args[$id]);
    $args = array_values($args);
} else {
    define('FORMAT', 'TEXT');
}

if ($id = array_search('-o', $args)) {
    define('OUTPUT', true);
} else {
    define('OUTPUT', false);
}

if ($id = array_search('-f', $args)) {
    define('FILE', $args[$id + 1]);
} else {
    define('FILE', false);
}

if ($id = array_search('-D', $args)) {
    define('STYLE', 'DISTINCT');
} elseif ($id = array_search('-C', $args)) {
    define('STYLE', 'COUNTED_ALL');
} elseif ($id = array_search('-B', $args)) {
    define('STYLE', 'BOOLEAN');
} elseif ($id = array_search('-G', $args)) {
    define('STYLE', 'COUNTED');
} else {
    define('STYLE', 'ALL');
}

$report = "";
$summary = new Report\Summary();

// Presentation of the report
    $section = new Report\Text($client);
//    $section->setText('Here the text for th report');
    $report .= $section->toMarkdown();

// Application configuration (Things we know before starting)

    $report .= "## <a name=\"report_presentation\"></a>Report presentation\n";
    $section = new Report\Text($client);
//    $section->setText('Here the text for th report');
    $report .= $section->toMarkdown();
    $summary->addH1("Application configuration");

    $report .= "## <a name=\"application_configuration\"></a>Application configuration\n";
    $section = new Report\Text($client);
//    $section->setText('Here the text for th report');
    $report .= $section->toMarkdown();
    $summary->addH1("Application configuration");

// Report configuration (What we did)
$report .= "## <a name=\"report_configuration\"></a>Report configuration\n";
$queryTemplate = "g.V.has('analyzer', 'true')"; 
$vertices = query($client, $queryTemplate);

$return = array();
foreach($vertices as $k => $v) {
    $report .= "+ ".str_replace('Analyzer_', '', str_replace('\\', '_', $v[0]->code))."\n";
}
$report .= "\n";

$summary->addH1("Report configuration");

// Executive summary
$report .= "## <a name=\"executive_summary\"></a>Executive summary\n";
    $section = new Report\Text($client);
//    $section->setText('Here the text for th report');
    $report .= $section->toMarkdown();
    $summary->addH1("Executive summary");

// Application info (Things we know after analyze)
$report .= "## <a name=\"application_information\"></a>Application information\n";

$report .= "\n| Tables        | Usage          | 
| -------:        | -------:          |\n";
// use extensions ? 
$extensions = array('Mcrypt', 'Mysql', 'Kdm5');

foreach($extensions as $ext) {
    $queryTemplate = "g.idx('analyzers')[['analyzer':'Analyzer\\\\Extensions\\\\$ext']].out.any()"; 
    $vertices = query($client, $queryTemplate);

    $v = $vertices[0][0];
    $report .= "| $ext        | ".($v == "true" ? "Yes" : "No")."          | \n";
}

$report .= "\n";
$summary->addH1("Application information");

// Special reports (Recommendations)
$report .= "## <a name=\"special_reports\"></a>Special reports\n";

$analyzer = 'StrposCompare';
$report .= "### $analyzer\n";
$report .= "Presentation of $analyzer\n\n";

    $queryTemplate = "g.idx('analyzers')[['analyzer':'Analyzer\\\\Structures\\\\$analyzer']].out"; 
    $vertices = query($client, $queryTemplate);

    foreach($vertices as $v) {
        $report .= "+ ".$v[0]->line."\n";
    }
    $report .= "\n";
$summary->addH2("StrposCompare");

$analyzer = 'NotNot';
$report .= "### $analyzer\n";
$report .= "Presentation of $analyzer\n\n";

    $queryTemplate = "g.idx('analyzers')[['analyzer':'Analyzer\\\\Structures\\\\$analyzer']].out"; 
    $vertices = query($client, $queryTemplate);

    if (count($vertices) > 0) {
        foreach($vertices as $v) {
            $report .= "+ ".$v[0]->line."\n";
        }   
        $report .= "\n";
    } else {
        $report .= "Nothing to report for $analyzer\n";
    }

$analyzer = 'Iffectation';
$report .= "### $analyzer\n";
$report .= "Presentation of $analyzer\n\n";

    $queryTemplate = "g.idx('analyzers')[['analyzer':'Analyzer\\\\Structures\\\\$analyzer']].out"; 
    $vertices = query($client, $queryTemplate);

    if (count($vertices) > 0) {
        foreach($vertices as $v) {
            $report .= "+ ".$v[0]->line."\n";
        }   
        $report .= "\n";
    } else {
        $report .= "Nothing to report for $analyzer\n";
    }

$summary->addH1("Special reports");


// Glossary
$report .= "## <a name=\"application_glossary\"></a>Application glossary\n";

    $section = new Report\TableCounted($client);
    $section->setQuery("m = [:]; g.idx('analyzers')[['analyzer':'Analyzer\\\\Type\\\\Integer']].out.groupCount(m){it.code}.cap");
    $section->setName('Integer');
    $report .= $section->toMarkdown();

    $section = new Report\TableCounted($client);
    $section->setQuery("m = [:]; g.idx('analyzers')[['analyzer':'Analyzer\\\\Type\\\\String']].out.groupCount(m){it.code}.cap");
    $section->setName('String');
    $report .= $section->toMarkdown();

    $section = new Report\TableCounted($client);
    $section->setQuery("m = [:]; g.idx('analyzers')[['analyzer':'Analyzer\\\\Type\\\\Real']].out.groupCount(m){it.code}.cap");
    $section->setName('Real');
    $report .= $section->toMarkdown();

    $section = new Report\TableCounted($client);
    $section->setQuery("m = [:]; g.idx('analyzers')[['analyzer':'Analyzer\\\\Classes\\\\Classesnames']].out.groupCount(m){it.code}.cap");
    $section->setName('Classnames');
    $report .= $section->toMarkdown();

    $section = new Report\TableCounted($client);
    $section->setQuery("m = [:]; g.idx('analyzers')[['analyzer':'Analyzer\\\\Variables\\\\Variablenames']].out.groupCount(m){it.code}.cap");
    $section->setName('Variablenames');
    $report .= $section->toMarkdown();

$summary->addH1("Application glossary");

// Generating summary and title page and disclaimer

$report_fore = "\n\n\n\nApplication Audit Report \n\n\n\n\n\n";
$report_fore .= $summary->toMarkdown();
$report_fore .= "\n\n\n\n";

$report = $report_fore.$report;

if (FORMAT == 'TEXT') {
    $text = $report;
} elseif (FORMAT == 'JSON') {
    $text = json_encode($return);
} elseif (FORMAT == 'CSV') {
    $text = array(array('Code', 'File', 'Namespace', 'Class', 'Function'));
    foreach($return as $k => $v) {
        if (is_array($v)) {
            $text[] = $v;
        } else {
            $text[] = array($k, $v);
        }
    }
} elseif (FORMAT == 'MARKDOWN' || FORMAT == 'HTML' || FORMAT == 'ODT') {
    $text = $report;
} else {
// default behavior
    print_r($return);
}

if (FORMAT == 'HTML'|| FORMAT == 'ODT') {
    $text = Markdown::defaultTransform($text);
}

if (OUTPUT) {
    print $text;
}

$extensions = array('JSON' => 'json',
                    'HTML' => 'html',
                    'MARKDOWN' => 'md',
                    'ODT' => 'odt',
                    'TEXT' => 'txt',
                    'CSV' => 'csv');

if (FILE) {
    $name = FILE.'.'.$extensions[FORMAT];
    if (file_exists($name)) {
        print "$name already exists. Aborting\n";
        die();
    }

    if (FORMAT == 'ODT') {
        $name1 = FILE.'.'.$extensions['HTML'];
        file_put_contents($name1, $text);

        $name = FILE.'.'.$extensions[FORMAT];
        shell_exec('pandoc -o '.$name.' '.$name1);
        unlink($name1);
    } elseif (FORMAT == 'CSV') {
        $fp = fopen($name, 'w');
        foreach($text as $t) {
            fputcsv($fp, $t);
        }
        fclose($fp);
    } else {
        file_put_contents($name, $text);
    }
}

function query($client, $query) {
    $queryTemplate = $query;
    $params = array('type' => 'IN');
    try {
        $query = new \Everyman\Neo4j\Gremlin\Query($client, $queryTemplate, $params);
        return $query->getResultSet();
    } catch (\Exception $e) {
        $message = $e->getMessage();
        $message = preg_replace('#^.*\[message\](.*?)\[exception\].*#is', '\1', $message);
        print "Exception : ".$message."\n";
        
        print $queryTemplate."\n";
        die();
    }
    return $query->getResultSet();
}


?>