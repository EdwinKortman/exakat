#!/usr/bin/env php
<?php
use Everyman\Neo4j\Client,
	Everyman\Neo4j\Index\NodeIndex,
	Everyman\Neo4j\Relationship,
	Everyman\Neo4j\Node,
	Everyman\Neo4j\Gremlin,
	Tokenizer\Token,
	Michelf\MarkdownExtra,
	Report\Liste,
	Report\HashTable;

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$client = new Client();

$args = $argv;
if (!isset($args[1])) {
    $project = 'default';
} else {
    $project = $args[1];
}
if (!file_exists('./projects/'.$project.'/config.ini')) {
    print "No such project as '$project'. Aborting\n";
    die();
}
$config = parse_ini_file('./projects/'.$project.'/config.ini');

if ($id = array_search('-json', $args)) {
    define('FORMAT', 'JSON');
    unset($args[$id]);
    $args = array_values($args);
} elseif ($id = array_search('-text', $args)) {
    define('FORMAT', 'TEXT');
    unset($args[$id]);
    $args = array_values($args);
} elseif ($id = array_search('-odt', $args)) {
    define('FORMAT', 'ODT');
    unset($args[$id]);
    $args = array_values($args);
} elseif ($id = array_search('-markdown', $args)) {
    define('FORMAT', 'MARKDOWN');
    unset($args[$id]);
    $args = array_values($args);
} elseif ($id = array_search('-pdf', $args)) {
    define('FORMAT', 'PDF');
    unset($args[$id]);
    $args = array_values($args);
} elseif ($id = array_search('-csv', $args)) {
    define('FORMAT', 'CSV');
    unset($args[$id]);
    $args = array_values($args);
} elseif ($id = array_search('-html', $args)) {
    define('FORMAT', 'HTML');
    unset($args[$id]);
    $args = array_values($args);
} else {
    define('FORMAT', 'TEXT');
}

if ($id = array_search('-o', $args)) {
    define('OUTPUT', true);
} else {
    define('OUTPUT', false);
}

if ($id = array_search('-f', $args)) {
    define('FILE', $args[$id + 1]);
} else {
    define('FILE', false);
}

if ($id = array_search('-D', $args)) {
    define('STYLE', 'DISTINCT');
} elseif ($id = array_search('-C', $args)) {
    define('STYLE', 'COUNTED_ALL');
} elseif ($id = array_search('-B', $args)) {
    define('STYLE', 'BOOLEAN');
} elseif ($id = array_search('-G', $args)) {
    define('STYLE', 'COUNTED');
} else {
    define('STYLE', 'ALL');
}

$report = new Report\Report($client);
$report->addContent('Text', 'Audit report for application');

$report->createH1('Report presentation');

$report->createH2('Report synopsis'); 
$report->addContent('Text', 'Presentation of the report process');

$report->createH2('Report configuration'); 
$ReportInfo = new Report\ReportInfo($project);
$report->addContent('HashTable', $ReportInfo->toArray()); // presentation of the report, its organization and extra information on its configuration (such as PHP version used, when, version of software, human reviewer...)

/*
$report->createH2('Analyser list'); 
$AnalyzerList = new Report\AnalyzerList($project);
$report->addContent('Liste', $AnalyzerList->toArray()); 
*/

/*
human review of the audit, and 3 paragraph explation + table with priorities
$report->createH2('Executive summary');
$report->addContent('Text');
*/

$report->createH1('Appinfo'); // phpinfo for the application
$Appinfo = new Report\Appinfo($client);
$ht = $report->addContent('HashTable', $Appinfo->toArray());
$ht->setHeaderName('Feature');
$ht->setHeaderCount('Present');


$no_output = array();

///// Application analyzes 
$analyzes = array('Structures\\StrposCompare', 
                  'Structures\\Iffectation',
                  'Structures\\ErrorReportingWithInteger',
                  'Structures\\ForWithFunctioncall',
                  'Structures\\ForeachSourceNotVariable',
                  'Variables\\VariableUsedOnce',

                  'Structures\\NotNot',
                  );

foreach($analyzes as $id => $a) {
    if (!in_array(str_replace('\\', '/', $a), $config['analyzer'])) {
        unset($analyzes[$id]);
    }
}

if (count($analyzes) > 0) {
    $h1 = false;
    foreach($analyzes as $a) {
        $a = "Analyzer\\$a";
        $analyzer = new $a($client); 
        $results = $analyzer->toArray();
        
        if (empty($results)) {
            $no_output[] = $analyzer->getName();
            continue;
        }

        if (!$h1) {
            $report->createH1('Analyzes'); 
            $h1 = true;
        }
        $report->createH2($analyzer->getName()); 

        $report->addContent('Text', $analyzer->getDescription());
        $list = $report->addContent('Liste', $results);
        $list->setSummary(true);
        $list->setSort(Liste::SORT_NORMAL);
    }
}


///// Application inventory 
$analyzes = array('Type\\Integer', 
                  'Type\\Hexadecimal', 
                  'Type\\Octal', 
                  'Type\\Binary', 
                  'Type\\Ports', 
                  'Type\\HttpStatus', 

                  'Type\\Real', 
                  
                  'Type\\String', 
                  
                  'Type\\Pcre', 
                  
                  'Classes\\Classnames',
                  
                  'Variables\\Variablenames',
                  'Variables\\VariableOneLetter',
                  'Variables\\VariableLong',
                  'Variables\\VariablePhp',
                  'Variables\\VariableVariables',
                  'Variables\\VariableUppercase',
                  );
foreach($analyzes as $id => $a) {
    if (!in_array(str_replace('\\', '/', $a), $config['analyzer'])) {
        unset($analyzes[$id]);
    }
}

if (count($analyzes) > 0) {
    $h1 = false;

    foreach($analyzes as $a) {
        $a = "Analyzer\\$a";
        $analyzer = new $a($client); 
        $results = $analyzer->toCountedArray();

        if (empty($results)) {
            $no_output[] = $analyzer->getName();
            continue;
        }

        if (!$h1) {
            $report->createH1('Application inventory'); // list of named elements and semantic analysis
            $h1 = true;
        }

        $report->createH2($analyzer->getName()); 

        $report->addContent('Text', $analyzer->getDescription());
        $ht = $report->addContent('HashTable', $results);
        $ht->setSummary(true);
        $ht->setSort(HashTable::SORT_KEY);
    }
}

if (count($no_output) > 0) {
    $report->createH1('Other used analyzers'); // le last analyzers

       $report->addContent('Text', "The following analyzers were also used, but yielded no feedback.");
       $ht = $report->addContent('Liste', $no_output);
       $ht->setSummary(true);
       $ht->setSort(HashTable::SORT_KEY);
}


if (FORMAT == 'TEXT') {
    $text = $report->toText();
} elseif (FORMAT == 'JSON') {
    $text = $report->toJson();
} elseif (FORMAT == 'CSV') {
    $text = array(array('Code', 'File', 'Namespace', 'Class', 'Function'));
    foreach($return as $k => $v) {
        if (is_array($v)) {
            $text[] = $v;
        } else {
            $text[] = array($k, $v);
        }
    }
} elseif (FORMAT == 'MARKDOWN' || FORMAT == 'HTML' || FORMAT == 'ODT' || FORMAT == 'PDF') {
    $text = $report->toMarkdown();
} else {
    $text = $report->toText();
    print $text;
}

if (FORMAT == 'ODT') {
    $text = MarkdownExtra::defaultTransform($text);
} elseif ( FORMAT == 'HTML' || FORMAT == 'PDF') {
    $text = MarkdownExtra::defaultTransform($text);
    
    $text = <<<HTML
<!DOCTYPE html
PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>

    <head>
        <title>Application report for $project</title>
        <link rel="stylesheet" href="media/hartija.css" type="text/css" media="print" charset="utf-8">
	    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	</head>

    <body>
$text
    </body>
</html>
HTML;
}

if (OUTPUT) {
    print $text;
}

$extensions = array('JSON' => 'json',
                    'HTML' => 'html',
                    'MARKDOWN' => 'md',
                    'ODT' => 'odt',
                    'PDF' => 'pdf',
                    'TEXT' => 'txt',
                    'CSV' => 'csv');

if (FILE) {
    $name = FILE.'.'.$extensions[FORMAT];
    if (file_exists($name)) {
        print "$name already exists. Aborting\n";
        die();
    }

    if (FORMAT == 'ODT') {
        $name1 = FILE.'.tmp.'.$extensions['HTML'];
        file_put_contents($name1, $text);

        $name = FILE.'.'.$extensions[FORMAT];
        shell_exec('pandoc -o '.$name.' '.$name1);
        unlink($name1);
    } elseif (FORMAT == 'PDF') {
        $name1 = FILE.'.tmp.'.$extensions['HTML'];
        file_put_contents($name1, $text);

        $name = FILE.'.'.$extensions[FORMAT];
        shell_exec('wkhtmltopdf '.$name1.' '.$name);
        unlink($name1);
    } elseif (FORMAT == 'CSV') {
        $fp = fopen($name, 'w');
        foreach($text as $t) {
            fputcsv($fp, $t);
        }
        fclose($fp);
    } elseif (FORMAT == 'HTML') {
        file_put_contents($name, $text);
        
        if (!file_exists( dirname($name).'/media')) {
            mkdir(dirname($name).'/media', 0755);
        }
        copy('media/hartija.css', dirname($name).'/media/hartija.css');
    } else {
        file_put_contents($name, $text);
    }
}

function query($client, $query) {
    $queryTemplate = $query;
    $params = array('type' => 'IN');
    try {
        $query = new \Everyman\Neo4j\Gremlin\Query($client, $queryTemplate, $params);
        return $query->getResultSet();
    } catch (\Exception $e) {
        $message = $e->getMessage();
        $message = preg_replace('#^.*\[message\](.*?)\[exception\].*#is', '\1', $message);
        print "Exception : ".$message."\n";
        
        print $queryTemplate."\n";
        die();
    }
    return $query->getResultSet();
}


?>