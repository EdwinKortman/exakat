<?php

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$args = $argv;

if (!isset($argv[1])) {
    print "Usage : php bin/project [Project name]\n";
    die();
}

if ($id = array_search('-p', $args)) {
    $project = $args[$id + 1];
} else {
    $project = $args[1];
}

if (!file_exists('./projects/'.$project)) {
    print "Project '$project' doesn't exists in projects folder. Aborting\n";
    die();
}

if (!file_exists('./projects/'.$project.'/config.ini')) {
    print "Project '$project' exists but has no config file. Aborting\n";
    die();
}

if (!file_exists('./projects/'.$project.'/code')) {
    print "Project '$project' exists but has no code folder. Aborting\n";
    die();
}

if (!file_exists('./projects/'.$project.'/log')) {
    print "Project '$project' exists but has no log folder. Aborting\n";
    die();
}

logTime('Start');

$db = new Db();
$db->insert('project_runs', array('date_start', 'folder'), array(date('Y-m-d h:i:s'), $project));
$project_run = $db->insert_id();

logTime('Database');

$progress = 1;
$total_steps = 9 / 100; // number of usage of logProgress - 1
logProgress($project, $progress++ / $total_steps);

shell_exec('sh scripts/clean.sh'); // or php bin/delete
logProgress($project, $progress++ / $total_steps);

logTime('Clean');

print "Running project '$project'\n";

shell_exec('php bin/files '.$project.'');
logTime('Files');

shell_exec('php bin/load -r -q -d ./projects/'.$project.'/code/ -p '.$project.'');
logProgress($project, $progress++ / $total_steps);
print "Project loaded\n";
logTime('Loading');

$res = shell_exec('php bin/build_root -p '.$project.' > ./projects/'.$project.'/log/build_root.final.log');
print "Build root\n";

if (file_exists('./projects/'.$project.'/log/tokenizer.final.log')) {
    unlink('./projects/'.$project.'/log/tokenizer.final.log');
}
$res = shell_exec('php bin/tokenizer -p '.$project.' > ./projects/'.$project.'/log/tokenizer.final.log');
if (!empty($res) && strpos('javax.script.ScriptException', $res) !== false) {
    file_put_contents('log/tokenizer_error.log', $res);
    die();
}

if (file_exists('./projects/'.$project.'/log/errors.log')) {
    unlink('./projects/'.$project.'/log/errors.log');
}
logTime('Tokenizer');

shell_exec('php bin/extract_errors > ./projects/'.$project.'/log/errors.log');
print "Got the errors (if any)\n";

shell_exec('php bin/export_tree; mv log/network.* ./projects/'.$project.'/log/ ');
print "Getting the tree\n";

shell_exec('php bin/stat > ./projects/'.$project.'/log/stat.log');
logProgress($project, $progress++ / $total_steps);
print "Project tokenized\n";

shell_exec('php bin/log2csv; mv log/* ./projects/'.$project.'/log/');
sleep(2);

logTime('Stats');
logProgress($project, $progress++ / $total_steps);

if (file_exists('./projects/'.$project.'/log/analyze.final.log')) {
    unlink('./projects/'.$project.'/log/analyze.final.log');
}

shell_exec('php bin/analyze -T Analyze > ./projects/'.$project.'/log/analyze.analyze.final.log');
shell_exec('php bin/analyze -T Appinfo > ./projects/'.$project.'/log/analyze.appinfo.final.log');
logProgress($project, $progress++ / $total_steps);
print "Project analyzed\n";
logTime('Analyze');

shell_exec('php bin/report_all '.$project);
logTime('Report');

logProgress($project, $progress++ / $total_steps);

print "Project reported\n";
$db->query('UPDATE project_runs SET `date_finish` = NOW() WHERE id = '.$project_run);
logTime('Final');

function logProgress($project, $percent) {
    $mid = mysqli_connect('localhost', 'wordpress', 'wordpress', 'wordpress');
    mysqli_query($mid, "UPDATE exakat_projects SET progress = $percent WHERE name='$project'");
    print mysqli_error($mid);
}

function logTime($step) {
    static $log, $begin, $end, $start;
    
    if (is_null($log)) {
        $log = fopen('log/project.timing.csv', 'w+');
    }
    $end = microtime(true);
    if (is_null($begin)) { 
        $begin = $end; 
        $start = $end;
    }
    
    fwrite($log, $step."\t".($end - $begin)."\t".($end - $start)."\n");
    $begin = $end;
}
?>