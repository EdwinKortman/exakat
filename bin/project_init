<?php

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$config = Config::factory($argv);
$project = $config->project;

if ($project == 'default') {
    die("No project name provided. Add -p option\n");
}

$repo_url = $config->repository;

if ($config->delete === true) {
    check_project_dir($project);
    print "Deleting $project\n";
    
    // final wait..., just in case
    sleep(2);

    shell_exec('rm -rf projects/'.$project.'/');
} elseif ($config->update === true) {
    check_project_dir($project);
    print "Updating $project\n";
    
    print shell_exec('cd projects/'.$project.'/code/; git pull');
} else {
    print "Initializing $project with '$repo_url'\n";
    init_project($project, $repo_url);
}

print "Done\n";

function init_project($project, $repo_url) {
    if (!file_exists('./projects/'.$project)) {
        mkdir('./projects/'.$project, 0755);
    } else {
        print './projects/'.$project.' already exists. Reusing'."\n";
    }

    if (!file_exists('./projects/'.$project.'/log/')) {
        mkdir('./projects/'.$project.'/log/', 0755);
    } else {
        print './projects/'.$project.'/log/ already exists. Ignoring'."\n";
        return null; 
    }

    if (!file_exists('./projects/'.$project.'/config.ini')) {
        // default initial config. Found in test project.
        $config = <<<INI
phpversion = 5.6

ignore_dirs[] = /test/
ignore_dirs[] = /tests/
ignore_dirs[] = /docs/
ignore_dirs[] = /doc/

file_extensions = 

project_name = "$project";
project_url = "$repo_url";

INI;

        file_put_contents('./projects/'.$project.'/config.ini', $config);
    } else {
        print './projects/'.$project.'/config.ini already exists. Ignoring'."\n";
    }

    print shell_exec('chmod -R g+w ./projects/'.$project);

    if (!file_exists('./projects/'.$project.'/code/')) {
        if ($repo_url === '' || $repo_url === false) {
            print "Installing empty code\n";
            print shell_exec("cd ./projects/$project; mkdir code");
            return null;
        } elseif (strpos($repo_url, 'bitbucket.org') !== false) {
            print "Installing with git on bitbucket\n";
            print shell_exec("cd ./projects/$project; hg clone $repo_url code");
        } elseif (strpos($repo_url, '.googlecode.com/svn/') !== false) {
            print "Installing with svn on googlecode\n";
            print shell_exec("cd ./projects/$project; svn checkout $repo_url code");
        } elseif (strpos($repo_url, 'svn.code.sf.net') !== false) {
            print "Installing with svn on sourceforge\n";
            print shell_exec("cd ./projects/$project; svn checkout $repo_url code");
        } elseif (preg_match('#^[a-z0-9\-]+/[a-z0-9\-]+$#', $repo_url)) {
            print "Installing with composer\n";
            // composer install
            $composer = new stdClass();
            $composer->require = new stdClass();
            $composer->require->$repo_url = 'dev-master';
            $json = json_encode($composer);
            file_put_contents('projects/'.$project.'/composer.json', $json);
            print shell_exec("cd ./projects/$project; composer install; mv vendor code");
        } elseif (strpos($repo_url, '.zip') !== false) {
            print "Installing with URL and zip\n";
            $file = basename($repo_url);
            $file_noext = str_replace('.zip', '', $file);
            print shell_exec("cd ./projects/$project; wget $repo_url; unzip -qq $file; mv $file_noext code; rm $file");
        } elseif (strpos($repo_url, '.tbz') !== false || strpos($repo_url, '.tar.bz2') !== false) {
            print "Installing with URL and tar.bz2\n";
            $file = basename($repo_url);
            $file_noext = str_replace('.tbz', '', $file);
            $file_noext = str_replace('.tar.bz2', '', $file);
            print shell_exec("cd ./projects/$project; wget $repo_url; mkdir code; tar -jxf $file -C code; rm $file");
        } elseif (strpos($repo_url, '.tgz') !== false || strpos($repo_url, '.tar.gz') !== false) {
            print "Installing with URL and tar.gz\n";
            $file = basename($repo_url);
            $file_noext = str_replace('.tgz', '', $file);
            $file_noext = str_replace('.tar.gz', '', $file);
            print shell_exec("cd ./projects/$project; wget $repo_url; mkdir code; tar -zxf $file -C code; rm $file");
    // xz etc.
        } else {
            print "Installing with git\n";
            print shell_exec("cd ./projects/$project; git clone $repo_url code");
        }

        if (!file_exists("./projects/$project/code")) {
            print "Error : code was not cloned\n";
        }
    } elseif (file_exists('./projects/'.$project.'/code/')) {
        print "Code folder is already there. Leaving it intact.\n";
    }
    
    print "Counting files\n";
    print shell_exec('php bin/files -p '.$project);
}

function check_project_dir($project) {
    if ($project === null ) {
        print "Usage : bin/project_init [-du] -p project_name -R repository";
        die();
    }

    if (!file_exists('projects/'.$project) ) {
        print "Project $project doesn't exists.\n Aborting\n";
        die();
    }
}

?>