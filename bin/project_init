<?php

$args = $argv;

if (!isset($args[1]) ) {
    print "Usage : bin/project_init project_name repository";
    die();
}
$project = $args[1];
if (isset($args[2])) {
    $repo_url = $args[2];
} else {
    $repo_url = null;
}

print "Initializing $project with '$repo_url'\n";
sleep(2);

if (!file_exists('./projects/'.$project)) {
    mkdir('./projects/'.$project, 0755);
} else {
    print './projects/'.$project.' already exists. Reusing'."\n";
}


if (!file_exists('./projects/'.$project.'/log/')) {
    mkdir('./projects/'.$project.'/log/', 0755);
} else {
    print './projects/'.$project.'/log/ already exists. Ignoring'."\n";
}

if (!file_exists('./projects/'.$project.'/config.ini')) {
    $files = glob('library/Analyzer/*/*.php');
    
    $config = '';
    foreach($files as $file) {
        if (basename(dirname($file)) == 'Common') { continue; }

        $analyzer = basename(dirname($file)).'/'.basename($file);
        $analyzer = substr($analyzer, 0, -4);
        $config .= "analyzer[] = $analyzer;\n";
    }

    file_put_contents('./projects/'.$project.'/config.ini', $config);
} else {
    print './projects/'.$project.'/config.ini already exists. Ignoring'."\n";
}

print shell_exec('chmod -R g+w ./projects/'.$project);

if (!empty($repo_url) && !file_exists('./projects/'.$project.'/code/')) {
    if (strpos($repo_url, 'bitbucket.org') !== false) {
        print shell_exec("cd ./projects/$project; hg clone $repo_url code");
    } elseif (strpos($repo_url, '.googlecode.com/svn/') !== false) {
        print shell_exec("cd ./projects/$project; svn checkout $repo_url code");
    } elseif (strpos($repo_url, 'svn.code.sf.net') !== false) {
        print shell_exec("cd ./projects/$project; svn checkout $repo_url code");
    } elseif (preg_match('#^[a-z0-9\-]+/[a-z0-9\-]+$#', $repo_url)) {
        // composer install
        $composer = new stdClass();
        $composer->require = new stdClass();
        $composer->require->$repo_url = 'dev-master';
        $json = json_encode($composer);
        file_put_contents('projects/'.$project.'/composer.json', $json);
        print shell_exec("cd ./projects/$project; composer install; mv vendor code");
    } elseif (strpos($repo_url, '.zip') !== false) {
        $file = basename($repo_url);
        $file_noext = str_replace('.zip', '', $file);
        print shell_exec("cd ./projects/$project; wget $repo_url; unzip -qq $file; mv $file_noext code; rm $file");
// bz2, tar.bz, tgz, xz etc.
    } else {
        print shell_exec("cd ./projects/$project; git clone $repo_url code");
    }

    if (!file_exists("./projects/$project/code")) {
        print "Error : code was not cloned\n";
    }
} elseif (file_exists('./projects/'.$project.'/code/')) {
    print "Code folder is already there. Leaving it intact.\n";
}


?>