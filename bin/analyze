#!/usr/bin/env php
<?php
use Everyman\Neo4j\Client,
	Everyman\Neo4j\Index\NodeIndex,
	Everyman\Neo4j\Relationship,
	Everyman\Neo4j\Node,
	Everyman\Neo4j\Gremlin,
	Analyzer\Common\Type;

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$args = $argv;
$begin = microtime(true);

if ($id = array_search('-v', $args)) {
    define('VERBOSE', true);
} else {
    define('VERBOSE', false);
}

if ($id = array_search('-p', $args)) {
    $project = $args[$id + 1];

    if (!file_exists('./projects/'.$project.'/config.ini')) {
        print "No such project as '$project'. Aborting\n";
        die();
    }
} elseif ($id = array_search('-P', $args)) {
    $project = '';
    $analyzer = $args[$id + 1];
    if (Analyzer\Analyzer::getClass($analyzer)) {
        $analyzers_class = array($analyzer);
    } else {
        die("No such class as '$analyzer'. Aborting\n");
    }
} elseif ($id = array_search('-T', $args)) {
    $project = '';
    $analyzer = $args[$id + 1];
    if (Analyzer\Analyzer::getClass('Themes\\'.$analyzer)) {
        $analyzers_class = array($analyzer);
    } else {
        die("No such class as $analyzer. Aborting\n");
    }
} else {
    $project = 'default';
}

$client = new Client();
$log = new Log('analyze');

$analyzers = new NodeIndex($client, 'analyzers');

if (!isset($analyzers_class)) {
    $INI = parse_ini_file('./projects/'.$project.'/config.ini');

    if (!isset($INI['analyzer']) || empty($INI['analyzer'])) {
        print "No analyzers list in config.ini. Aborting\n";
        die();
    }
    $log->log("Analyzing project $project");

    $analyzers_class = array();
    $log->log("Configured analyzers\t".count($INI['analyzer']));

    foreach($INI['analyzer'] as $analyzer) {
        if (Analyzer\Analyzer::getClass($analyzer)) {
            $analyzers_class[] = $analyzer;
        } else {
            print "No such analyzer as '$analyzer'. Ignoring\n";
            $log->log("Ignored analyzer\t$analyzer");
            continue; 
        }
    }
}

$log->log("Runnable analyzers\t".count($analyzers_class)."");

$dependencies = array();
$dependencies2 = array();
foreach($analyzers_class as $a) {
    $d = Analyzer\Analyzer::getInstance($a, $client);
    $d = $d->dependsOn();
    if (empty($d)) {
        $dependencies2[] = $a;
    } else {
        $diff = array_diff($d, $dependencies2);
        if (empty($diff)) {
            $dependencies2[] = $a;
        } else {
            $dependencies[$a] = $diff;
        }
    }
}

$c = count($dependencies) + 1;
while(!empty($dependencies) && $c > count($dependencies)) {
    $c = count($dependencies);
    foreach($dependencies as $a => $d) {
        $diff = array_diff($d, $dependencies2);
        
        foreach($diff as $k => $v) {
            if (!isset($dependencies[$v])) {
                $x = Analyzer\Analyzer::getInstance($v, $client);
                $dep = $x->dependsOn();
                if (count($dep) == 0) {
                    $dependencies2[] = $v;
                    $c++;
                } else {
                    $dependencies[$v] = $dep;
                    $c += count($dep) + 1;
                }
            } elseif (count($dependencies[$v]) == 0) {
                $dependencies2[] = $v;
                unset($diff[$k]);
            }
        }
        
        if (empty($diff)) {
            $dependencies2[] = $a;
            unset($dependencies[$a]);
        } else {
            $dependencies[$a] = $diff;
        }
    }
}

if (!empty($dependencies)) {
    print "Dependencies depending on each other : can't finalize. Aborting\n";
    print_r($dependencies);
    
    die();
}

$total_results = 0;
foreach($dependencies2 as $analyzer_class) {
    $begin = microtime(true);
    $analyzer = Analyzer\Analyzer::getInstance($analyzer_class, $client);
    $analyzer->init();

    if (isset($INI['phpversion'])) {
        $version = $INI['phpversion'];
    } else {
        print "Using self phpversion for analyze\n";
        $version = phpversion();
    }
    $Php = new Phpexec($version);

    if (!$analyzer->checkPhpVersion($version)) {
        $analyzer = str_replace('\\', '\\\\', $analyzer_class);
            
        $query = <<<GREMLIN
g.idx('analyzers')[['analyzer':'$analyzer']].next().setProperty('notCompatibleWithPhpVersion', '$version');
GREMLIN;
        $arguments = array('type' => 'IN');
        $result = new \Everyman\Neo4j\Gremlin\Query($client, $query, $arguments);

        print "$analyzer_class is not compatible with PHP version $version. Ignoring\n";
    } elseif (!$analyzer->checkPhpConfiguration($Php)) {
        $analyzer = str_replace('\\', '\\\\', $analyzer_class);
            
        $query = <<<GREMLIN
g.idx('analyzers')[['analyzer':'$analyzer']].next().setProperty('notCompatibleWithPhpConfiguration', '$version');
GREMLIN;
        $arguments = array('type' => 'IN');
        $result = new \Everyman\Neo4j\Gremlin\Query($client, $query, $arguments);

        print "$analyzer_class is not compatible with PHP configuration of this version. Ignoring\n";
    } else {
        $analyzer->run();

        $count = $analyzer->getRowCount();
        $total_results += $count;
        print "$analyzer_class fait ($count)\n";
        $end = microtime(true);
        $log->log("$analyzer_class\t".($end - $begin)."\t$count");
    }
}

$server_stat = new Stats($client);
$server_stat->collect();
$log->report('analyze', array('project' => $project, 
                              'analyzer' => count($analyzers_class),
                              'tokens' => $server_stat->tokens_count,
                              'results' => $total_results));

print "Done\n";
?>