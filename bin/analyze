#!/usr/bin/env php
<?php
use Everyman\Neo4j\Client,
	Everyman\Neo4j\Index\NodeIndex,
	Everyman\Neo4j\Relationship,
	Everyman\Neo4j\Node,
	Everyman\Neo4j\Gremlin,
	Analyzer\Common\Type;

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$args = $argv;
$begin = microtime(true);

if ($id = array_search('-v', $args)) {
    define('VERBOSE', true);
} else {
    define('VERBOSE', false);
}

if ($id = array_search('-p', $args)) {
    $project = $args[$id + 1];
} else {
    $project = 'default';
}

if (!file_exists('./projects/'.$project.'/config.ini')) {
    print "No such project as '$project'. Aborting\n";
    die();
}

$client = new Client();
$log = new Log('analyze');

$analyzers = new NodeIndex($client, 'analyzers');

$INI = parse_ini_file('./projects/'.$project.'/config.ini');

if (!isset($INI['analyzer']) || empty($INI['analyzer'])) {
    print "No analyzers list in config.ini. Aborting\n";
    die();
}
$log->log("Analyzing project $project");

$analyzers_class = array();
$log->log("Configured analyzers\t".count($INI['analyzer']));

foreach($INI['analyzer'] as $analyzer) {
    if (!file_exists("library/Analyzer/$analyzer.php")) {
        print "No such analyzer as '$analyzer'. Ignoring\n";
        $log->log("Ignored analyzer\t$analyzer");
        continue; 
    }
    $analyzers_class[] = 'Analyzer\\'.str_replace('/', '\\', $analyzer);
}

$log->log("Runnable analyzers\t".count($analyzers_class)."");

$dependencies = array();
$dependencies2 = array();
foreach($analyzers_class as $a) {
    $d = new $a($client);
    $d = $d->dependsOn();
    if (empty($d)) {
        $dependencies2[] = $a;
    } else {
        $diff = array_diff($d, $dependencies2);
        if (empty($diff)) {
            $dependencies2[] = $a;
        } else {
            $dependencies[$a] = $diff;
        }
    }
}

$c = count($dependencies) + 1;
while(!empty($dependencies) && $c > count($dependencies)) {
    print "New Round\n\n";
    $c = count($dependencies);
    foreach($dependencies as $a => $d) {
        $diff = array_diff($d, $dependencies2);
        
        foreach($diff as $k => $v) {
            if (!isset($dependencies[$v])) {
                $x = new $v($client);
                $dependencies[$v] = $x->dependsOn();
                unset($diff[$k]);
                $c++;
            }
        }
        
        if (empty($diff)) {
            $dependencies2[] = $a;
            unset($dependencies[$a]);
        } else {
            $dependencies[$a] = $diff;
        }
    }
}


if (!empty($dependencies)) {
    print "Dependencies depending on each other : can't finalize. Aborting\n";
    print_r($dependencies);
    die();
}

$total_results = 0;
foreach($dependencies2 as $analyzer_class) {
    $begin = microtime(true);
    $analyzer = new $analyzer_class($client);
    $analyzer->init();
    $analyzer->run();
    $count = $analyzer->get_row_count();
    $total_results += $count;
    print "$analyzer_class fait ($count)\n";
    $end = microtime(true);
    $log->log("$analyzer_class\t".($end - $begin)."\t$count");
}

$server_stat = new Stats($client);
$server_stat->collect();
$log->report('analyze', array('project' => $project, 
                              'analyzer' => count($analyzers_class),
                              'tokens' => $server_stat->tokens_count,
                              'results' => $total_results));

print "Done\n";
?>