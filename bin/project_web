<?php

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

define('UPDATE_STATUS', 6); // search for update_ status in this code.
define('PROJECT_MAX_TOKENS', 100000); // maximum size of the project to be tested.

$db = new Db('wordpress');

$log = new Log('project_web');
$log->log( "Starting time : ".date('r'));

if (isset($argv[1])) {
    if ($project_id = intval($argv[1])) {
        print "Processing the project id $project_id\n";
        $log->log( "Processing the project id $project_id");

        $res = $db->query('SELECT id, name, vcs_url FROM exakat_projects WHERE id = '.$project_id);
        if (!$res) { 
            print "No project for id {$project_id}; Stopping\n";
            die();
        }
    
        $exakat = $res->fetch_array();
        process_project($exakat);
        $log->log( "Finished the project id $project_id");
    } elseif ($argv[1] == '-D') {
        $log->log( "Starting demon system");
        print "Starting demon system\n";
        $wait = 0;
        
        do {
            $res = $db->query('SELECT count(*) FROM exakat_projects WHERE progress = 0');
            $count = $res->fetch_array();

            if ($count[0] > 0) { 
                $log->log( "Current queue : {$count[0]}");
                $res = $db->query('SELECT name, vcs_url, id FROM exakat_projects WHERE progress = 0 ORDER BY id LIMIT 1');
                $exakat = $res->fetch_array();
                print ("\n");
                process_project($exakat);
            } else {
                $wait++;
                print ".";
                if($wait % 100 == 0) {
                    print " ($wait)\n";
                    $log->log( "Waited $wait");
                }
                sleep(5);
            }
        } while (1);
        
    } else {
        $project_name = $argv[1];
        $res = $db->query('SELECT id, name, vcs_url FROM exakat_projects WHERE name = "'.$project_name.'"');

        if ($res) { 
            $exakat = $res->fetch_array();

            $log->log( "Project $project_name has id {$exakat['id']}");
            print "Project $project_name has id {$exakat['id']}\n";
            process_project($exakat);
            $log->log( "Finished $project_name");
        } else {
            print "Don't know what to do. Aborting\n";
            $log->log( "Don't know what to do with '$project_name'. Aborting");
        }
    }
} else {
    print "Doing only one project\n";
    $log->log( "Doing only one project");

    $res = $db->query('SELECT name, vcs_url, id FROM exakat_projects WHERE progress = 0 ORDER BY id LIMIT 1');
    if (!$res) { 
        print "No projects to process; Stopping\n";
        die();
    }

    // Warning : Race condition ! 
    $exakat = $res->fetch_array();
    process_project($exakat);
    $log->log( "Finished one project");
}

function process_project($exakat) {
    $db = new Db('wordpress');

    print "Running test {$exakat['id']} : {$exakat['vcs_url']}\n";
    $step = 0;

    update_status($exakat['id'], floor($step++ / UPDATE_STATUS) * 100, "Fetching the code");

    if (!file_exists('projects/'.$exakat['name'])) {
        print "Initializing project ".$exakat['name']."\n";
        shell_exec('php bin/project_init -p '.$exakat['name'].' -R '.$exakat['vcs_url']); 
    } else {
        print "Project ".$exakat['name']." already initialized.\n";
    }

    print "Cleaning neo4j\n";
    shell_exec('sh scripts/clean.sh'); 

    print "\n";
    update_status($exakat['id'], floor($step++ / UPDATE_STATUS) * 100, "Getting project file statistics");
    $json = shell_exec('php bin/files -p '.$exakat['name'].' -json');
    $results = json_decode($json);
    
    if ($results->tokens > PROJECT_MAX_TOKENS) {
        update_status($exakat['id'], 101, "This project is too large to test (at the moment).");
        print "Project too big ({$results->tokens})\n";
        return false;
    }

    print "Loading data\n";
    update_status($exakat['id'], floor($step++ / UPDATE_STATUS) * 100, "Tokenizing the code");
    shell_exec('php bin/load -r -q -d ./projects/'.$exakat['name'].'/code/ -p '.$exakat['name'].'');

    print "Building root\n";
    $res = shell_exec('php bin/build_root -p '.$exakat['name'].' > ./projects/'.$exakat['name'].'/log/build_root.final.log');

    print "Tokenizing the code\n";
    $res = shell_exec('php bin/tokenizer -p '.$exakat['name'].' > ./projects/'.$exakat['name'].'/log/tokenizer.final.log');

    shell_exec('rm -rf ./projects/'.$exakat['name'].'/log/errors.log; php bin/extract_errors > ./projects/'.$exakat['name'].'/log/errors.log');
    print "Got the errors (if any)\n";

    shell_exec('php bin/export_tree; mv log/network.* ./projects/'.$exakat['name'].'/log/ ');
    shell_exec('php bin/stat > ./projects/'.$exakat['name'].'/log/stat.log');
    shell_exec('php bin/log2csv; mv log/* ./projects/'.$exakat['name'].'/log/');
    sleep(2);

    print "Analyzing the code\n";
    update_status($exakat['id'], floor($step++ / UPDATE_STATUS) * 100, "Analyzing the code");
    $themes = array('Analyze', 'Appinfo', '"Coding Conventions"', '"Dead code"', 'Security');
    foreach($themes as $theme) {
        shell_exec('php bin/analyze -T '.$theme.' > ./projects/'.$exakat['name'].'/log/analyze.'.str_replace(' ', '_', trim($theme, '"')).'.final.log');
        print "Analyzing $theme\n";
    }

    print "Preparing the report\n";
    update_status($exakat['id'], floor($step++ / UPDATE_STATUS) * 100, "Preparing the report");
    shell_exec('php bin/report_all '.$exakat['name']);

    print "Project {$exakat['name']} reported\n";
    update_status($exakat['id'], 100, "Project reported");
    print $db->error();

    print "Finished\n";
}

function update_status($id, $progress, $message) {
    $db = new Db("wordpress");
    print "UPDATE exakat_projects SET progress = $progress, progress_human = '$message' WHERE id=$id\n";
    $db->query("UPDATE exakat_projects SET progress = $progress, progress_human = '$message' WHERE id=$id");
}
?>